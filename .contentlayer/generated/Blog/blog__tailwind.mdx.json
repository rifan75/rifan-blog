{
  "title": "Switching to Tailwind CSS",
  "publishedAt": "2020-12-14",
  "summary": "Learn why I switched my Next.js blog to use Tailwind CSS and how it impacted performance.",
  "image": "/static/images/tailwind/banner.png",
  "body": {
    "raw": "\r\nMy site is an opportunity to try new tech and form opinions on what I enjoy using. I learn best by building real things. After some evaluation, I've landed on the following tech stack:\r\n\r\n- Next.js (Upgraded to `v10`)\r\n- Tailwind CSS (Switched from Chakra UI)\r\n- `next-mdx-remote` (Switched from `next-mdx-enhanced`)\r\n- Deployed with Vercel\r\n\r\nI've improved performance, added new features, and cleaned up some code. Let's dive into why I chose this tech stack.\r\n\r\n### Next.js 10\r\n\r\nNext.js 10 introduced the [Image Component and Automatic Image Optimization](https://nextjs.org/docs/basic-features/image-optimization). I've optimized images manually before (using ImageAlpha / ImageOptim) as well as with automated tools (like ImgBot). With Next.js 10, I no longer need to worry about that.\r\n\r\nThe `Image` component helps prevent [Cumulative Layout Shift](https://web.dev/cls/) (CLS) by defining the `width` and `height` ahead of time. No more jumping layouts. It only loads images as they're scrolled into the viewport, keeping page loads fast. Plus, images are served in modern formats likeÂ [WebP](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types)Â when the browser supports it.\r\n\r\nPreventing CLS required a mental model shift. Previously, my images used normal Markdown image syntax and expanded to fill the width of their container (`700px`). For example:\r\n\r\n```jsx\r\n![Siamese Cat](/cat.png)\r\n```\r\n\r\nI wanted to avoid using the `height` and `width` props of `next/image`, if possible. The `Image` component exposes different [layout props](https://nextjs.org/docs/api-reference/next/image#layout) like `layout=fill`, which led to me believe I could [escape defining sizes](https://github.com/vercel/next.js/blob/canary/examples/image-component/pages/layout-fill.js). In reality, there's no way to avoid layout shift unless you explicitly tell the layout how much space to allocate. Once that clicked in my head, the `Image` component made sense.\r\n\r\nThis meant switching from Markdown image syntax (shown above) to using `next/image` via MDX. Since I had hundreds of Markdown files, I wanted to automate this. I created a [Node script using remark](https://github.com/leerob/leerob.io/blob/fb9c02b76128d91717a226e5c118b5c56e11696e/scripts/markdown-to-next-image.js) that transformed every image and read the dimensions from the file system. For example, the above Markdown image was transformed to:\r\n\r\n```jsx\r\n<Image alt=\"Siamese Cat\" src=\"/cat.png\" height={50} width={50} />\r\n```\r\n\r\n### Tailwind CSS\r\n\r\nAt first glance, Tailwind seems horrible. I've heard this sentiment many times and read [Adam's rebuttals](https://adamwathan.me/css-utility-classes-and-separation-of-concerns/). Earlier this year, I had the opportunity to try Tailwind on a project. I didn't hate it. Still, I needed a larger project to form an opinion on the framework.\r\n\r\nWell, the verdict is out. **I really enjoy Tailwind.** There was a learning curve as I tried to translate my existing CSS knowledge to Tailwind specific naming. For example, this vanilla CSS:\r\n\r\n```css\r\ndisplay: flex;\r\nflex-direction: row;\r\nalign-items: center;\r\n```\r\n\r\ntranslates to these utility classes with Tailwind:\r\n\r\n```jsx\r\n<div className=\"flex flex-row items-center\" />\r\n```\r\n\r\nThe Tailwind classes feel intuitive and their documentation makes it easy. The underlying idea of being bound to a design system made plenty of sense coming from Chakra UI. For example:\r\n\r\n```jsx\r\nimport { Flex } from '@chakra-ui/react';\r\n\r\n<Flex px={4} py={2} />;\r\n```\r\n\r\nChakra's [spacing system](https://chakra-ui.com/docs/theming/theme#spacing) is inspired by Tailwind. 1 spacing unit is equal to `0.25rem`, which translates to `4px` by default in most browsers. In the example below, we're adding `16px` of horizontal padding and `8px` of vertical padding.\r\n\r\n```jsx\r\n<div className=\"px-4 py-2\" />\r\n```\r\n\r\nI still enjoy Chakra for larger applications. Having pre-built UI components saves a lot of time. Their documentation has some good notes on the [differences between Tailwind](https://chakra-ui.com/docs/comparison#how-is-chakra-different-from-tailwind-css). For further reading, check out [How Should I Style My React Application?](/blog/css-with-react).\r\n\r\n### Dark Mode\r\n\r\nTailwind 2.0 makes using dark mode painless. Enable the `dark` [variant](https://tailwindcss.com/docs/dark-mode) and prefix your classes with `dark:`. That's pretty much it.\r\n\r\n```jsx\r\n<div class=\"bg-white dark:bg-gray-800\" />\r\n```\r\n\r\nI was able to keep a [dark mode toggle](https://github.com/leerob/leerob.io/blob/91233631f0e1a193295ffc54d2291f3109060007/components/Container.tsx) in the navigation thanks to [next-themes](https://github.com/pacocoursey/next-themes). Tailwind and `next-themes` [pair well](https://github.com/pacocoursey/next-themes#with-tailwind) together.\r\n\r\n```jsx\r\nimport { useTheme } from 'next-themes';\r\n\r\nconst ThemeChanger = () => {\r\n  const { theme, setTheme } = useTheme();\r\n\r\n  return (\r\n    <div>\r\n      The current theme is: {theme}\r\n      <button onClick={() => setTheme('light')}>Light Mode</button>\r\n      <button onClick={() => setTheme('dark')}>Dark Mode</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nI hit a few issues along the way adding dark mode to Tailwind Typography. The documentation felt a bit disjointed from the rest of Tailwind. I would have expected more guidance on pairing the two together.\r\n\r\nAfter digging through GitHub Issues, I was able to [get things working](https://github.com/leerob/leerob.io/blob/91233631f0e1a193295ffc54d2291f3109060007/tailwind.config.js). It wasn't obvious I needed `dark:prose-dark`. I also managed to get [syntax highlighting](https://github.com/leerob/leerob.io/blob/91233631f0e1a193295ffc54d2291f3109060007/styles/global.css) working through some custom styles.\r\n\r\n## Performance\r\n\r\nLibraries like `emotion` and `styled-system` require runtime JavaScript to compute styles and generate class names. That doesn't mean you can't use [CSS-in-JS](https://github.com/callstack/linaria) [correctly](https://github.com/ben-rogerson/twin.macro). But I'd argue using \"plain\" CSS helps you fall into the [pit of success](https://blog.codinghorror.com/falling-into-the-pit-of-success/) ([CSS Modules](https://nextjs.org/docs/basic-features/built-in-css-support), Tailwind, etc) more easily.\r\n\r\nThere is no correct answer. Each has their own tradeoffs. For my simple site, I choose the performance tradeoff. I was able to reduce the [number of assets downloaded](https://nextjs.org/docs/api-reference/cli#build) **by 43%**.\r\n\r\n- ðŸ“¦ Before â†’ `~150kb` First Load JS\r\n- ðŸ“ˆ After â†’ `~85kb` First Load JS\r\n\r\nThis change, paired with `next/image`, has my [Vercel Analytics](https://vercel.com/docs/analytics) looking incredible. Zero CLS.\r\n\r\n<Image\r\n  alt={`Vercel Analytics`}\r\n  src={`/static/images/tailwind/analytics.jpg`}\r\n  width={1000}\r\n  height={782}\r\n/>\r\n\r\nI'm also evaluating using Preact in the [client-side production build](https://github.com/leerob/leerob.io/commit/74a3ebb14b81f785ea96f9c73fbe4f6c2463679c). This prevents needingÂ [next-plugin-preact](https://github.com/preactjs/next-plugin-preact)Â to handle SSR and HMR ([source](https://blogify.dev/egoist/how-i-made-my-next-js-build-50-percent-smaller)). So far, I haven't noticed any issues with my small site and the results are promising. **39% smaller**.\r\n\r\n- ðŸ“¦ Before â†’ `~85kb` First Load JS\r\n- ðŸ“ˆ After â†’ `~52kb` First Load JS\r\n\r\n### MDX\r\n\r\n[Last year](/blog/mdx), I switched from using `@next/mdx` to `next-mdx-enhanced` mostly for front matter and layout support. These are now both [solved problems](https://nextjs.org/blog/markdown). Given that [next-mdx-enhanced](https://github.com/hashicorp/next-mdx-enhanced) will likely be deprecated soon (see below) I wanted to explore [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote).\r\n\r\n> You probably should be using `next-mdx-remote` instead of this library. It is ~50% faster, more flexible with content storage, does not induce memory issues at scale, and fits much better with the way that data is intended to flow through Next.js.\r\n\r\nWith the addition of `getStaticPaths` / `getServerSideProps`, you can treat your MDX data like any other data source in Next.js. It also removes the limitation of being bound to [file-system based routing](https://nextjs.org/docs/basic-features/pages) for your `.mdx` files. Since my site has hundreds of MDX files, moving these to a top-level `data/` folder made more sense to me.\r\n\r\nStill, the MDX experience feels _fragmented_. I'd like to merge `next-mdx-remote` with `@next/mdx` so there are fewer options. [nextra](https://github.com/shuding/nextra) (another related project) allows you to use methods like `getStaticProps` directly inside your MDX files. Maybe there's a path to convergence for all three.\r\n\r\n### Other\r\n\r\nI added [absolute Imports and module path aliases](https://nextjs.org/docs/advanced-features/module-path-aliases) to improve the readability of nested imports inside files. Here's a before and after example:\r\n\r\n```jsx\r\n// Before\r\nimport db from '../../lib/db-admin';\r\n\r\n// After\r\nimport db from 'lib/db-admin';\r\n```\r\n\r\nI also merged my previous project (jamstackfns) directly into this site with a new section called [Snippets](/snippets)! These are interesting pieces of code that didn't justify writing an entire blog post. For example, here's a few snippets I've added recently:\r\n\r\n- [React hook for storing a search value with Context](/snippets/search)\r\n- [React hook for displaying loading progress](/snippets/loading-progress)\r\n- [React hook to parse an email from a URL](/snippets/email-query-params)\r\n- [Gradient border with CSS](/snippets/gradient-border)\r\n- [Sticky navigation with CSS](/snippets/sticky-nav)\r\n- [CRUD Next.js API route](/snippets/crud-api-route)\r\n",
    "code": "var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var k=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),N=(a,e)=>{for(var s in e)c(a,s,{get:e[s],enumerable:!0})},l=(a,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!g.call(a,t)&&t!==s&&c(a,t,{get:()=>e[t],enumerable:!(i=p(e,t))||i.enumerable});return a};var f=(a,e,s)=>(s=a!=null?h(u(a)):{},l(e||!a||!a.__esModule?c(s,\"default\",{value:a,enumerable:!0}):s,a)),b=a=>l(c({},\"__esModule\",{value:!0}),a);var r=k((S,o)=>{o.exports=_jsx_runtime});var j={};N(j,{default:()=>x,frontmatter:()=>y});var n=f(r()),y={title:\"Switching to Tailwind CSS\",publishedAt:\"2020-12-14\",summary:\"Learn why I switched my Next.js blog to use Tailwind CSS and how it impacted performance.\",image:\"/static/images/tailwind/banner.png\"};function d(a){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",code:\"code\",h3:\"h3\",a:\"a\",span:\"span\",pre:\"pre\",strong:\"strong\",h2:\"h2\",blockquote:\"blockquote\",em:\"em\"},a.components),{Image:s}=e;return s||v(\"Image\",!0,\"112:1-117:3\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"My site is an opportunity to try new tech and form opinions on what I enjoy using. I learn best by building real things. After some evaluation, I've landed on the following tech stack:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Next.js (Upgraded to \",(0,n.jsx)(e.code,{children:\"v10\"}),\")\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Tailwind CSS (Switched from Chakra UI)\"}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"next-mdx-remote\"}),\" (Switched from \",(0,n.jsx)(e.code,{children:\"next-mdx-enhanced\"}),\")\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Deployed with Vercel\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"I've improved performance, added new features, and cleaned up some code. Let's dive into why I chose this tech stack.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"nextjs-10\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#nextjs-10\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Next.js 10\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next.js 10 introduced the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/image-optimization\",children:\"Image Component and Automatic Image Optimization\"}),\". I've optimized images manually before (using ImageAlpha / ImageOptim) as well as with automated tools (like ImgBot). With Next.js 10, I no longer need to worry about that.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Image\"}),\" component helps prevent \",(0,n.jsx)(e.a,{href:\"https://web.dev/cls/\",children:\"Cumulative Layout Shift\"}),\" (CLS) by defining the \",(0,n.jsx)(e.code,{children:\"width\"}),\" and \",(0,n.jsx)(e.code,{children:\"height\"}),\" ahead of time. No more jumping layouts. It only loads images as they're scrolled into the viewport, keeping page loads fast. Plus, images are served in modern formats like\\xA0\",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\",children:\"WebP\"}),\"\\xA0when the browser supports it.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Preventing CLS required a mental model shift. Previously, my images used normal Markdown image syntax and expanded to fill the width of their container (\",(0,n.jsx)(e.code,{children:\"700px\"}),\"). For example:\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsx)(e.code,{className:\"language-jsx code-highlight\",children:(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token operator\",children:\"!\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"[\"}),(0,n.jsx)(e.span,{className:\"token maybe-class-name\",children:\"Siamese\"}),\" \",(0,n.jsx)(e.span,{className:\"token maybe-class-name\",children:\"Cat\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"]\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token operator\",children:\"/\"}),\"cat\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\".\"}),(0,n.jsx)(e.span,{className:\"token property-access\",children:\"png\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),`\n`]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I wanted to avoid using the \",(0,n.jsx)(e.code,{children:\"height\"}),\" and \",(0,n.jsx)(e.code,{children:\"width\"}),\" props of \",(0,n.jsx)(e.code,{children:\"next/image\"}),\", if possible. The \",(0,n.jsx)(e.code,{children:\"Image\"}),\" component exposes different \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/api-reference/next/image#layout\",children:\"layout props\"}),\" like \",(0,n.jsx)(e.code,{children:\"layout=fill\"}),\", which led to me believe I could \",(0,n.jsx)(e.a,{href:\"https://github.com/vercel/next.js/blob/canary/examples/image-component/pages/layout-fill.js\",children:\"escape defining sizes\"}),\". In reality, there's no way to avoid layout shift unless you explicitly tell the layout how much space to allocate. Once that clicked in my head, the \",(0,n.jsx)(e.code,{children:\"Image\"}),\" component made sense.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This meant switching from Markdown image syntax (shown above) to using \",(0,n.jsx)(e.code,{children:\"next/image\"}),\" via MDX. Since I had hundreds of Markdown files, I wanted to automate this. I created a \",(0,n.jsx)(e.a,{href:\"https://github.com/leerob/leerob.io/blob/fb9c02b76128d91717a226e5c118b5c56e11696e/scripts/markdown-to-next-image.js\",children:\"Node script using remark\"}),\" that transformed every image and read the dimensions from the file system. For example, the above Markdown image was transformed to:\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsx)(e.code,{className:\"language-jsx code-highlight\",children:(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),(0,n.jsx)(e.span,{className:\"token class-name\",children:\"Image\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"alt\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"Siamese Cat\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"src\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"/cat.png\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"height\"}),(0,n.jsxs)(e.span,{className:\"token script language-javascript\",children:[(0,n.jsx)(e.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token number\",children:\"50\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"width\"}),(0,n.jsxs)(e.span,{className:\"token script language-javascript\",children:[(0,n.jsx)(e.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token number\",children:\"50\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsxs)(e.h3,{id:\"tailwind-css\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#tailwind-css\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Tailwind CSS\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At first glance, Tailwind seems horrible. I've heard this sentiment many times and read \",(0,n.jsx)(e.a,{href:\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\",children:\"Adam's rebuttals\"}),\". Earlier this year, I had the opportunity to try Tailwind on a project. I didn't hate it. Still, I needed a larger project to form an opinion on the framework.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Well, the verdict is out. \",(0,n.jsx)(e.strong,{children:\"I really enjoy Tailwind.\"}),\" There was a learning curve as I tried to translate my existing CSS knowledge to Tailwind specific naming. For example, this vanilla CSS:\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-css\",children:(0,n.jsxs)(e.code,{className:\"language-css code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token property\",children:\"display\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\" flex\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token property\",children:\"flex-direction\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\" row\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token property\",children:\"align-items\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\":\"}),\" center\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:\"translates to these utility classes with Tailwind:\"}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsx)(e.code,{className:\"language-jsx code-highlight\",children:(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"div\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"className\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"flex flex-row items-center\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsx)(e.p,{children:\"The Tailwind classes feel intuitive and their documentation makes it easy. The underlying idea of being bound to a design system made plenty of sense coming from Chakra UI. For example:\"}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsxs)(e.code,{className:\"language-jsx code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"import\"}),\" \",(0,n.jsxs)(e.span,{className:\"token imports\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\" \",(0,n.jsx)(e.span,{className:\"token maybe-class-name\",children:\"Flex\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'@chakra-ui/react'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\r\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),(0,n.jsx)(e.span,{className:\"token class-name\",children:\"Flex\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"px\"}),(0,n.jsxs)(e.span,{className:\"token script language-javascript\",children:[(0,n.jsx)(e.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token number\",children:\"4\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"py\"}),(0,n.jsxs)(e.span,{className:\"token script language-javascript\",children:[(0,n.jsx)(e.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token number\",children:\"2\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Chakra's \",(0,n.jsx)(e.a,{href:\"https://chakra-ui.com/docs/theming/theme#spacing\",children:\"spacing system\"}),\" is inspired by Tailwind. 1 spacing unit is equal to \",(0,n.jsx)(e.code,{children:\"0.25rem\"}),\", which translates to \",(0,n.jsx)(e.code,{children:\"4px\"}),\" by default in most browsers. In the example below, we're adding \",(0,n.jsx)(e.code,{children:\"16px\"}),\" of horizontal padding and \",(0,n.jsx)(e.code,{children:\"8px\"}),\" of vertical padding.\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsx)(e.code,{className:\"language-jsx code-highlight\",children:(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"div\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"className\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"px-4 py-2\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I still enjoy Chakra for larger applications. Having pre-built UI components saves a lot of time. Their documentation has some good notes on the \",(0,n.jsx)(e.a,{href:\"https://chakra-ui.com/docs/comparison#how-is-chakra-different-from-tailwind-css\",children:\"differences between Tailwind\"}),\". For further reading, check out \",(0,n.jsx)(e.a,{href:\"/blog/css-with-react\",children:\"How Should I Style My React Application?\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"dark-mode\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#dark-mode\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Dark Mode\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Tailwind 2.0 makes using dark mode painless. Enable the \",(0,n.jsx)(e.code,{children:\"dark\"}),\" \",(0,n.jsx)(e.a,{href:\"https://tailwindcss.com/docs/dark-mode\",children:\"variant\"}),\" and prefix your classes with \",(0,n.jsx)(e.code,{children:\"dark:\"}),\". That's pretty much it.\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsx)(e.code,{className:\"language-jsx code-highlight\",children:(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"div\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"class\"}),(0,n.jsxs)(e.span,{className:\"token attr-value\",children:[(0,n.jsx)(e.span,{className:\"token punctuation attr-equals\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'}),\"bg-white dark:bg-gray-800\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:'\"'})]}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"/>\"})]}),`\n`]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I was able to keep a \",(0,n.jsx)(e.a,{href:\"https://github.com/leerob/leerob.io/blob/91233631f0e1a193295ffc54d2291f3109060007/components/Container.tsx\",children:\"dark mode toggle\"}),\" in the navigation thanks to \",(0,n.jsx)(e.a,{href:\"https://github.com/pacocoursey/next-themes\",children:\"next-themes\"}),\". Tailwind and \",(0,n.jsx)(e.code,{children:\"next-themes\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/pacocoursey/next-themes#with-tailwind\",children:\"pair well\"}),\" together.\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsxs)(e.code,{className:\"language-jsx code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"import\"}),\" \",(0,n.jsxs)(e.span,{className:\"token imports\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\" useTheme \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),\" \",(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'next-themes'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\r\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,n.jsx)(e.span,{className:\"token function-variable function\",children:(0,n.jsx)(e.span,{className:\"token maybe-class-name\",children:\"ThemeChanger\"})}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword\",children:\"const\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\" theme\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\",\"}),\" setTheme \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,n.jsx)(e.span,{className:\"token operator\",children:\"=\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"useTheme\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\r\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token keyword control-flow\",children:\"return\"}),\" \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"    \",(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"div\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),(0,n.jsx)(e.span,{className:\"token plain-text\",children:`\\r\n`})]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token plain-text\",children:\"      The current theme is: \"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),\"theme\",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),(0,n.jsx)(e.span,{className:\"token plain-text\",children:`\\r\n`})]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token plain-text\",children:\"      \"}),(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"button\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"onClick\"}),(0,n.jsxs)(e.span,{className:\"token script language-javascript\",children:[(0,n.jsx)(e.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"setTheme\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"'light'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),(0,n.jsx)(e.span,{className:\"token plain-text\",children:\"Light Mode\"}),(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"</\"}),\"button\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),(0,n.jsx)(e.span,{className:\"token plain-text\",children:`\\r\n`})]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token plain-text\",children:\"      \"}),(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"<\"}),\"button\"]}),\" \",(0,n.jsx)(e.span,{className:\"token attr-name\",children:\"onClick\"}),(0,n.jsxs)(e.span,{className:\"token script language-javascript\",children:[(0,n.jsx)(e.span,{className:\"token script-punctuation punctuation\",children:\"=\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"{\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,n.jsx)(e.span,{className:\"token arrow operator\",children:\"=>\"}),\" \",(0,n.jsx)(e.span,{className:\"token function\",children:\"setTheme\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"(\"}),(0,n.jsx)(e.span,{className:\"token string\",children:\"'dark'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"})]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),(0,n.jsx)(e.span,{className:\"token plain-text\",children:\"Dark Mode\"}),(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"</\"}),\"button\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),(0,n.jsx)(e.span,{className:\"token plain-text\",children:`\\r\n`})]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token plain-text\",children:\"    \"}),(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsxs)(e.span,{className:\"token tag\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"</\"}),\"div\"]}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\">\"})]}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[\"  \",(0,n.jsx)(e.span,{className:\"token punctuation\",children:\")\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token punctuation\",children:\"}\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,n.jsx)(e.p,{children:\"I hit a few issues along the way adding dark mode to Tailwind Typography. The documentation felt a bit disjointed from the rest of Tailwind. I would have expected more guidance on pairing the two together.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"After digging through GitHub Issues, I was able to \",(0,n.jsx)(e.a,{href:\"https://github.com/leerob/leerob.io/blob/91233631f0e1a193295ffc54d2291f3109060007/tailwind.config.js\",children:\"get things working\"}),\". It wasn't obvious I needed \",(0,n.jsx)(e.code,{children:\"dark:prose-dark\"}),\". I also managed to get \",(0,n.jsx)(e.a,{href:\"https://github.com/leerob/leerob.io/blob/91233631f0e1a193295ffc54d2291f3109060007/styles/global.css\",children:\"syntax highlighting\"}),\" working through some custom styles.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"performance\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#performance\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Performance\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Libraries like \",(0,n.jsx)(e.code,{children:\"emotion\"}),\" and \",(0,n.jsx)(e.code,{children:\"styled-system\"}),\" require runtime JavaScript to compute styles and generate class names. That doesn't mean you can't use \",(0,n.jsx)(e.a,{href:\"https://github.com/callstack/linaria\",children:\"CSS-in-JS\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/ben-rogerson/twin.macro\",children:\"correctly\"}),`. But I'd argue using \"plain\" CSS helps you fall into the `,(0,n.jsx)(e.a,{href:\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\",children:\"pit of success\"}),\" (\",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/built-in-css-support\",children:\"CSS Modules\"}),\", Tailwind, etc) more easily.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There is no correct answer. Each has their own tradeoffs. For my simple site, I choose the performance tradeoff. I was able to reduce the \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/api-reference/cli#build\",children:\"number of assets downloaded\"}),\" \",(0,n.jsx)(e.strong,{children:\"by 43%\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u{1F4E6} Before \\u2192 \",(0,n.jsx)(e.code,{children:\"~150kb\"}),\" First Load JS\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u{1F4C8} After \\u2192 \",(0,n.jsx)(e.code,{children:\"~85kb\"}),\" First Load JS\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This change, paired with \",(0,n.jsx)(e.code,{children:\"next/image\"}),\", has my \",(0,n.jsx)(e.a,{href:\"https://vercel.com/docs/analytics\",children:\"Vercel Analytics\"}),\" looking incredible. Zero CLS.\"]}),`\n`,(0,n.jsx)(s,{alt:\"Vercel Analytics\",src:\"/static/images/tailwind/analytics.jpg\",width:1e3,height:782}),`\n`,(0,n.jsxs)(e.p,{children:[\"I'm also evaluating using Preact in the \",(0,n.jsx)(e.a,{href:\"https://github.com/leerob/leerob.io/commit/74a3ebb14b81f785ea96f9c73fbe4f6c2463679c\",children:\"client-side production build\"}),\". This prevents needing\\xA0\",(0,n.jsx)(e.a,{href:\"https://github.com/preactjs/next-plugin-preact\",children:\"next-plugin-preact\"}),\"\\xA0to handle SSR and HMR (\",(0,n.jsx)(e.a,{href:\"https://blogify.dev/egoist/how-i-made-my-next-js-build-50-percent-smaller\",children:\"source\"}),\"). So far, I haven't noticed any issues with my small site and the results are promising. \",(0,n.jsx)(e.strong,{children:\"39% smaller\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"\\u{1F4E6} Before \\u2192 \",(0,n.jsx)(e.code,{children:\"~85kb\"}),\" First Load JS\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"\\u{1F4C8} After \\u2192 \",(0,n.jsx)(e.code,{children:\"~52kb\"}),\" First Load JS\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"mdx\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#mdx\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"MDX\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"/blog/mdx\",children:\"Last year\"}),\", I switched from using \",(0,n.jsx)(e.code,{children:\"@next/mdx\"}),\" to \",(0,n.jsx)(e.code,{children:\"next-mdx-enhanced\"}),\" mostly for front matter and layout support. These are now both \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/blog/markdown\",children:\"solved problems\"}),\". Given that \",(0,n.jsx)(e.a,{href:\"https://github.com/hashicorp/next-mdx-enhanced\",children:\"next-mdx-enhanced\"}),\" will likely be deprecated soon (see below) I wanted to explore \",(0,n.jsx)(e.a,{href:\"https://github.com/hashicorp/next-mdx-remote\",children:\"next-mdx-remote\"}),\".\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"You probably should be using \",(0,n.jsx)(e.code,{children:\"next-mdx-remote\"}),\" instead of this library. It is ~50% faster, more flexible with content storage, does not induce memory issues at scale, and fits much better with the way that data is intended to flow through Next.js.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With the addition of \",(0,n.jsx)(e.code,{children:\"getStaticPaths\"}),\" / \",(0,n.jsx)(e.code,{children:\"getServerSideProps\"}),\", you can treat your MDX data like any other data source in Next.js. It also removes the limitation of being bound to \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/pages\",children:\"file-system based routing\"}),\" for your \",(0,n.jsx)(e.code,{children:\".mdx\"}),\" files. Since my site has hundreds of MDX files, moving these to a top-level \",(0,n.jsx)(e.code,{children:\"data/\"}),\" folder made more sense to me.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Still, the MDX experience feels \",(0,n.jsx)(e.em,{children:\"fragmented\"}),\". I'd like to merge \",(0,n.jsx)(e.code,{children:\"next-mdx-remote\"}),\" with \",(0,n.jsx)(e.code,{children:\"@next/mdx\"}),\" so there are fewer options. \",(0,n.jsx)(e.a,{href:\"https://github.com/shuding/nextra\",children:\"nextra\"}),\" (another related project) allows you to use methods like \",(0,n.jsx)(e.code,{children:\"getStaticProps\"}),\" directly inside your MDX files. Maybe there's a path to convergence for all three.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"other\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#other\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Other\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I added \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/advanced-features/module-path-aliases\",children:\"absolute Imports and module path aliases\"}),\" to improve the readability of nested imports inside files. Here's a before and after example:\"]}),`\n`,(0,n.jsx)(e.pre,{className:\"language-jsx\",children:(0,n.jsxs)(e.code,{className:\"language-jsx code-highlight\",children:[(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token comment\",children:\"// Before\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"import\"}),\" \",(0,n.jsx)(e.span,{className:\"token imports\",children:\"db\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'../../lib/db-admin'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\\r\n`]}),(0,n.jsx)(e.span,{className:\"code-line\",children:`\\r\n`}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token comment\",children:\"// After\"}),`\\r\n`]}),(0,n.jsxs)(e.span,{className:\"code-line\",children:[(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"import\"}),\" \",(0,n.jsx)(e.span,{className:\"token imports\",children:\"db\"}),\" \",(0,n.jsx)(e.span,{className:\"token keyword module\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"token string\",children:\"'lib/db-admin'\"}),(0,n.jsx)(e.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I also merged my previous project (jamstackfns) directly into this site with a new section called \",(0,n.jsx)(e.a,{href:\"/snippets\",children:\"Snippets\"}),\"! These are interesting pieces of code that didn't justify writing an entire blog post. For example, here's a few snippets I've added recently:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/snippets/search\",children:\"React hook for storing a search value with Context\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/snippets/loading-progress\",children:\"React hook for displaying loading progress\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/snippets/email-query-params\",children:\"React hook to parse an email from a URL\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/snippets/gradient-border\",children:\"Gradient border with CSS\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/snippets/sticky-nav\",children:\"Sticky navigation with CSS\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/snippets/crud-api-route\",children:\"CRUD Next.js API route\"})}),`\n`]})]})}function w(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(d,a)})):d(a)}var x=w;function v(a,e,s){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(s?\"\\nIt\\u2019s referenced in your code at `\"+s+\"` in `D:\\\\Linux_Share\\\\reactapp\\\\rifan-blog\\\\data\\\\blog\\\\_mdx_bundler_entry_point-5051d553-76ee-4482-9200-5e3b037bf267.mdx`\":\"\"))}return b(j);})();\n;return Component;"
  },
  "_id": "blog/tailwind.mdx",
  "_raw": {
    "sourceFilePath": "blog/tailwind.mdx",
    "sourceFileName": "tailwind.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/tailwind"
  },
  "type": "Blog",
  "readingTime": {
    "text": "6 min read",
    "minutes": 5.875,
    "time": 352500,
    "words": 1175
  },
  "wordCount": 1181,
  "tweetIds": [],
  "slug": "tailwind"
}