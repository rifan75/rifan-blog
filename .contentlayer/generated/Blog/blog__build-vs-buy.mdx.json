{
  "title": "Build vs. Buy",
  "publishedAt": "2018-09-25",
  "summary": "What decisions go into evaluating software solutions?",
  "image": "/static/images/build-vs-buy/banner.png",
  "body": {
    "raw": "\r\nAn essential part of any software company is the tooling required to build, test, deploy, release, and monitor their software. This is an integral part of the software development life cycle (SDLC). Whether you should build or buy this tooling is a critical, expensive decision.\r\n\r\nCan we find an off-the-shelf product that satisfies the needs of our company? What about an open-source solution? Do we need to build something custom? There are many factors that influence this decision. It ultimately depends on the nuances of your company, industry, and product.\r\n\r\nThis article will be a real-world example of why we chose to build our own monitoring and alerting system to support our Software as a Service (SaaS) product. To start, let me first explain the company and give some background.\r\n\r\n### What is Workiva?\r\n\r\n[Workiva (WK)](https://www.workiva.com/) is a cloud-based software company in the finance industry used by over 80% of Fortune 500 companies. Founded in 2008, we now have over 1200 employees and many offices around the world.\r\n\r\nWe want to ship quality code as fast and securely as possible. I joined Workiva in 2015 to work at the end of our DevOps pipeline: monitoring.\r\n\r\n> “DevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.”\r\n\r\n### State of Monitoring (2015)\r\n\r\nAn engineer on a product team is given requirements for a task to complete. After making the necessary code changes and testing her work, she opens a pull request (PR) on GitHub to have the changes reviewed by her team.\r\n\r\nStatic analysis (e.g. code linting) and test suites run against her code. If all checks pass and the PR has been properly reviewed, it is merged and the code will make its way to production.\r\n\r\nLet’s say a user encounters an error while using our product. How does the engineer who created the new feature know that things are broken? Ideally, this error would trigger an alert to notify the engineer that there was a problem.\r\n\r\nUnfortunately, this was not the reality for most engineers at this time. The main source of notification was via a daily email instead of near real-time alerting to a chat room. Theoretically, engineers could query the logs in Splunk at any time to find out if there was a problem. Unfortunately, many engineers found the query language difficult to understand.\r\n\r\nThis meant it sometimes took hours before engineers reacted to an issue if there hadn’t been a complaint from a customer yet. We wanted to improve our support process and ideally fix issues before customers even noticed there was a problem. We wanted every team to be set up with near real-time alerting for the errors they cared about. These alerts needed to be relevant and helpful, decreasing the time it took to analyze and fix issues.\r\n\r\n### Evaluating Options\r\n\r\nOur company, product, and industry presented us with some difficult requirements:\r\n\r\n- Strict security and compliance requirements\r\n- Sensitive customer data\r\n- A wide variety of programming languages (some not well used)\r\n- Massive code base (100s of repositories) would require a lot of changes\r\n\r\nNot a single off-the-shelf solution we found supported every major programming language we used. This wasn’t a complete showstopper, because some had REST APIs or other methods of getting data sent to their product. It just required a bit more work.\r\n\r\nAt the time, very few had SOC compliance or the ability to run on-premise. This was a deal breaker for a lot of the options we considered since the security of our customer’s data is paramount.\r\n\r\nWe evaluated the time it would take to adopt the final two contending solutions to match our infrastructure and processes. Did they have all the features we wanted? How much of our codebase would we need to modify to make their product work? Would we be guaranteed support from the company in case we encountered bugs or intricacies with their system? Would we be able to create integrations for company-specific needs?\r\n\r\n### Our Decision\r\n\r\nAfter weighing the options and much debate, we decided it was in our best interest to build our own solution, utilizing existing Infrastructure as a Service (IaaS) solutions like Amazon Web Services (AWS) and Google App Engine (GAE) which allow you to only pay for what you need. Our main goals behind this decision were to:\r\n\r\n- Provide value faster by incrementally building a new solution versus adapting to existing solutions\r\n- Create a scalable, reliable platform that will revolutionize the support process of our products\r\n- Drive the adoption of this solution by desire and not requirement so that 100% of production services have near real-time alerting set up\r\n\r\nThat’s where my journey with Workiva began as we started building our monitoring and alerting system.\r\n\r\n### How Does It Work?\r\n\r\n> This section dives into the technical details of how the system is built. If you’re just wondering what the outcome was, skip to the next section.\r\n\r\nAt the core of the system is the actual log message. To ensure all things are formatted and presented in the same way, we have a logging specification for each major language we use.\r\n\r\nWe have a layer of abstraction on top of each language that captures the language’s stdout and transforms it to follow the logging specification. These libraries also provide a platform for other information like telemetry, analytics, and tracing data.\r\n\r\nThe logs are then sent to Splunk as well as an AWS Kinesis stream. This stream allows us to process large amounts of data records in near real-time. Using AWS Lambda functions, we process and send the information to our GAE application for data storage.\r\n\r\nThe main reason we chose GAE over AWS for the rest of our application was so our support product was decoupled from our production product. It could have lived entirely in AWS if we were so inclined. Nonetheless, the information gets sent from Lambda to our GAE application created with Python and Flask.\r\n\r\nThe front-end of our web application was originally created with JavaScript & React, but we eventually ended up porting to Dart instead. This is due to the large investment in the Dart ecosystem our company has and the opportunity to dogfood our existing [open-source software](http://workiva.github.io/) and tooling.\r\n\r\n### State of Monitoring (2018)\r\n\r\nOver the past 3 years, we’ve worked tirelessly to create a product that revolutionizes the support process. It’s now a mature product with over 10,000 commits and 700 releases. Most importantly, we have achieved our goal of **100% of production services having near real-time alerting set up**.\r\n\r\nLet's walk through a typical use case of the product. First, a user will set up alerting rules so they are notified of the errors they care about. This could be a HipChat or Slack alert.\r\n\r\n<Image\r\n  alt={`Build vs. Buy - Exception Monitoring`}\r\n  src={`/static/images/build-vs-buy/hubble-alert.png`}\r\n  width={1252}\r\n  height={304}\r\n/>\r\n\r\nFrom here, the user is taken to our application to inspect the error.\r\n\r\n<Image\r\n  alt={`Build vs. Buy - Exception Monitoring`}\r\n  src={`/static/images/build-vs-buy/hubble-context-view.png`}\r\n  width={3360}\r\n  height={1820}\r\n/>\r\n\r\nThis is the complete overview of this specific error. You'll see similar stack traces, relevant metadata, accounts/users affected, comments, JIRA tickets, and more.\r\n\r\n<Image\r\n  alt={`Build vs. Buy - Exception Monitoring`}\r\n  src={`/static/images/build-vs-buy/hubble-errors-table.png`}\r\n  width={3256}\r\n  height={1665}\r\n/>\r\n\r\nErrors are segmented by projects. There are different projects for each environment (e.g. dev, sandbox, prod). The above image shows the project overview listing all errors for the given day. Users have the ability to search and filter their results to find what's most important.\r\n\r\nTeams are able to proactively fix issues before customers notice. We have processes in place to support the rollout of our next generation products. In almost all regards, this product was a success. However, has the rest of the industry caught up?\r\n\r\nWe periodically compare our application against other third-party and open-source solutions to see if we’re still providing more value (ideally at a lower cost). Most of the features we built over the past 3 years are now available in other solutions. The industry has caught up in most regards, as exception monitoring has become a necessity of supporting SaaS products.\r\n\r\n### Conclusion\r\n\r\nAs of right now, it is still cheaper for us to host our own solution versus migrating over to another provider. If hosting costs were to change, or the volume of logs was to drastically increase, this might not be true. This is why it’s important to constantly evaluate your product against others to determine when it’s right to build vs. buy. If your team currently doesn’t have any exception monitoring, we would recommend either [Sentry](https://sentry.io/) or [BugSnag](https://www.bugsnag.com/).\r\n",
    "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),w=(o,e)=>{for(var n in e)a(o,n,{get:e[n],enumerable:!0})},s=(o,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!g.call(o,i)&&i!==n&&a(o,i,{get:()=>e[i],enumerable:!(r=u(e,i))||r.enumerable});return o};var y=(o,e,n)=>(n=o!=null?d(m(o)):{},s(e||!o||!o.__esModule?a(n,\"default\",{value:o,enumerable:!0}):n,o)),b=o=>s(a({},\"__esModule\",{value:!0}),o);var c=f((A,l)=>{l.exports=_jsx_runtime});var T={};w(T,{default:()=>x,frontmatter:()=>v});var t=y(c()),v={title:\"Build vs. Buy\",publishedAt:\"2018-09-25\",summary:\"What decisions go into evaluating software solutions?\",image:\"/static/images/build-vs-buy/banner.png\"};function h(o){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",blockquote:\"blockquote\",ul:\"ul\",li:\"li\",strong:\"strong\"},o.components),{Image:n}=e;return n||S(\"Image\",!0,\"79:1-84:3\"),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"An essential part of any software company is the tooling required to build, test, deploy, release, and monitor their software. This is an integral part of the software development life cycle (SDLC). Whether you should build or buy this tooling is a critical, expensive decision.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Can we find an off-the-shelf product that satisfies the needs of our company? What about an open-source solution? Do we need to build something custom? There are many factors that influence this decision. It ultimately depends on the nuances of your company, industry, and product.\"}),`\n`,(0,t.jsx)(e.p,{children:\"This article will be a real-world example of why we chose to build our own monitoring and alerting system to support our Software as a Service (SaaS) product. To start, let me first explain the company and give some background.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"what-is-workiva\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#what-is-workiva\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is Workiva?\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://www.workiva.com/\",children:\"Workiva (WK)\"}),\" is a cloud-based software company in the finance industry used by over 80% of Fortune 500 companies. Founded in 2008, we now have over 1200 employees and many offices around the world.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"We want to ship quality code as fast and securely as possible. I joined Workiva in 2015 to work at the end of our DevOps pipeline: monitoring.\"}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"\\u201CDevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.\\u201D\"}),`\n`]}),`\n`,(0,t.jsxs)(e.h3,{id:\"state-of-monitoring-2015\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#state-of-monitoring-2015\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"State of Monitoring (2015)\"]}),`\n`,(0,t.jsx)(e.p,{children:\"An engineer on a product team is given requirements for a task to complete. After making the necessary code changes and testing her work, she opens a pull request (PR) on GitHub to have the changes reviewed by her team.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Static analysis (e.g. code linting) and test suites run against her code. If all checks pass and the PR has been properly reviewed, it is merged and the code will make its way to production.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Let\\u2019s say a user encounters an error while using our product. How does the engineer who created the new feature know that things are broken? Ideally, this error would trigger an alert to notify the engineer that there was a problem.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Unfortunately, this was not the reality for most engineers at this time. The main source of notification was via a daily email instead of near real-time alerting to a chat room. Theoretically, engineers could query the logs in Splunk at any time to find out if there was a problem. Unfortunately, many engineers found the query language difficult to understand.\"}),`\n`,(0,t.jsx)(e.p,{children:\"This meant it sometimes took hours before engineers reacted to an issue if there hadn\\u2019t been a complaint from a customer yet. We wanted to improve our support process and ideally fix issues before customers even noticed there was a problem. We wanted every team to be set up with near real-time alerting for the errors they cared about. These alerts needed to be relevant and helpful, decreasing the time it took to analyze and fix issues.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"evaluating-options\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#evaluating-options\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Evaluating Options\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Our company, product, and industry presented us with some difficult requirements:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Strict security and compliance requirements\"}),`\n`,(0,t.jsx)(e.li,{children:\"Sensitive customer data\"}),`\n`,(0,t.jsx)(e.li,{children:\"A wide variety of programming languages (some not well used)\"}),`\n`,(0,t.jsx)(e.li,{children:\"Massive code base (100s of repositories) would require a lot of changes\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Not a single off-the-shelf solution we found supported every major programming language we used. This wasn\\u2019t a complete showstopper, because some had REST APIs or other methods of getting data sent to their product. It just required a bit more work.\"}),`\n`,(0,t.jsx)(e.p,{children:\"At the time, very few had SOC compliance or the ability to run on-premise. This was a deal breaker for a lot of the options we considered since the security of our customer\\u2019s data is paramount.\"}),`\n`,(0,t.jsx)(e.p,{children:\"We evaluated the time it would take to adopt the final two contending solutions to match our infrastructure and processes. Did they have all the features we wanted? How much of our codebase would we need to modify to make their product work? Would we be guaranteed support from the company in case we encountered bugs or intricacies with their system? Would we be able to create integrations for company-specific needs?\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"our-decision\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#our-decision\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Our Decision\"]}),`\n`,(0,t.jsx)(e.p,{children:\"After weighing the options and much debate, we decided it was in our best interest to build our own solution, utilizing existing Infrastructure as a Service (IaaS) solutions like Amazon Web Services (AWS) and Google App Engine (GAE) which allow you to only pay for what you need. Our main goals behind this decision were to:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Provide value faster by incrementally building a new solution versus adapting to existing solutions\"}),`\n`,(0,t.jsx)(e.li,{children:\"Create a scalable, reliable platform that will revolutionize the support process of our products\"}),`\n`,(0,t.jsx)(e.li,{children:\"Drive the adoption of this solution by desire and not requirement so that 100% of production services have near real-time alerting set up\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"That\\u2019s where my journey with Workiva began as we started building our monitoring and alerting system.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"how-does-it-work\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#how-does-it-work\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"How Does It Work?\"]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"This section dives into the technical details of how the system is built. If you\\u2019re just wondering what the outcome was, skip to the next section.\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"At the core of the system is the actual log message. To ensure all things are formatted and presented in the same way, we have a logging specification for each major language we use.\"}),`\n`,(0,t.jsx)(e.p,{children:\"We have a layer of abstraction on top of each language that captures the language\\u2019s stdout and transforms it to follow the logging specification. These libraries also provide a platform for other information like telemetry, analytics, and tracing data.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The logs are then sent to Splunk as well as an AWS Kinesis stream. This stream allows us to process large amounts of data records in near real-time. Using AWS Lambda functions, we process and send the information to our GAE application for data storage.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The main reason we chose GAE over AWS for the rest of our application was so our support product was decoupled from our production product. It could have lived entirely in AWS if we were so inclined. Nonetheless, the information gets sent from Lambda to our GAE application created with Python and Flask.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The front-end of our web application was originally created with JavaScript & React, but we eventually ended up porting to Dart instead. This is due to the large investment in the Dart ecosystem our company has and the opportunity to dogfood our existing \",(0,t.jsx)(e.a,{href:\"http://workiva.github.io/\",children:\"open-source software\"}),\" and tooling.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"state-of-monitoring-2018\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#state-of-monitoring-2018\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"State of Monitoring (2018)\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Over the past 3 years, we\\u2019ve worked tirelessly to create a product that revolutionizes the support process. It\\u2019s now a mature product with over 10,000 commits and 700 releases. Most importantly, we have achieved our goal of \",(0,t.jsx)(e.strong,{children:\"100% of production services having near real-time alerting set up\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Let's walk through a typical use case of the product. First, a user will set up alerting rules so they are notified of the errors they care about. This could be a HipChat or Slack alert.\"}),`\n`,(0,t.jsx)(n,{alt:\"Build vs. Buy - Exception Monitoring\",src:\"/static/images/build-vs-buy/hubble-alert.png\",width:1252,height:304}),`\n`,(0,t.jsx)(e.p,{children:\"From here, the user is taken to our application to inspect the error.\"}),`\n`,(0,t.jsx)(n,{alt:\"Build vs. Buy - Exception Monitoring\",src:\"/static/images/build-vs-buy/hubble-context-view.png\",width:3360,height:1820}),`\n`,(0,t.jsx)(e.p,{children:\"This is the complete overview of this specific error. You'll see similar stack traces, relevant metadata, accounts/users affected, comments, JIRA tickets, and more.\"}),`\n`,(0,t.jsx)(n,{alt:\"Build vs. Buy - Exception Monitoring\",src:\"/static/images/build-vs-buy/hubble-errors-table.png\",width:3256,height:1665}),`\n`,(0,t.jsx)(e.p,{children:\"Errors are segmented by projects. There are different projects for each environment (e.g. dev, sandbox, prod). The above image shows the project overview listing all errors for the given day. Users have the ability to search and filter their results to find what's most important.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Teams are able to proactively fix issues before customers notice. We have processes in place to support the rollout of our next generation products. In almost all regards, this product was a success. However, has the rest of the industry caught up?\"}),`\n`,(0,t.jsx)(e.p,{children:\"We periodically compare our application against other third-party and open-source solutions to see if we\\u2019re still providing more value (ideally at a lower cost). Most of the features we built over the past 3 years are now available in other solutions. The industry has caught up in most regards, as exception monitoring has become a necessity of supporting SaaS products.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"conclusion\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#conclusion\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"As of right now, it is still cheaper for us to host our own solution versus migrating over to another provider. If hosting costs were to change, or the volume of logs was to drastically increase, this might not be true. This is why it\\u2019s important to constantly evaluate your product against others to determine when it\\u2019s right to build vs. buy. If your team currently doesn\\u2019t have any exception monitoring, we would recommend either \",(0,t.jsx)(e.a,{href:\"https://sentry.io/\",children:\"Sentry\"}),\" or \",(0,t.jsx)(e.a,{href:\"https://www.bugsnag.com/\",children:\"BugSnag\"}),\".\"]})]})}function k(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(h,o)})):h(o)}var x=k;function S(o,e,n){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(n?\"\\nIt\\u2019s referenced in your code at `\"+n+\"` in `D:\\\\Linux_Share\\\\reactapp\\\\rifan-blog\\\\data\\\\blog\\\\_mdx_bundler_entry_point-e6a5643d-8a46-4c73-9afd-fddcc12267b2.mdx`\":\"\"))}return b(T);})();\n;return Component;"
  },
  "_id": "blog/build-vs-buy.mdx",
  "_raw": {
    "sourceFilePath": "blog/build-vs-buy.mdx",
    "sourceFileName": "build-vs-buy.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/build-vs-buy"
  },
  "type": "Blog",
  "readingTime": {
    "text": "8 min read",
    "minutes": 7.215,
    "time": 432900,
    "words": 1443
  },
  "wordCount": 1445,
  "tweetIds": [],
  "slug": "build-vs-buy"
}