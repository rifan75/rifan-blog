{
  "title": "What Makes a Great Developer Experience?",
  "publishedAt": "2022-06-13",
  "summary": "Tools that keep developers in the flow state have a magnetic force. An often unexplainable, invisible pull that attracts and retains them to certain products. This pull is Developer Experience (DX).",
  "image": "/static/images/developer-experience-examples/banner.png",
  "body": {
    "raw": "\r\nHere's a collection of opinions I hold on what makes a great Developer Experience (DX). Note that some of these apply more broadly than their category (e.g. frameworks).\r\n\r\n<StaticTweet id=\"1476237583105601538\" />\r\n\r\n### Frameworks and Libraries\r\n\r\n- **Onboard as fast as possible:** To keep creatives in the flow, you want to enable them to get started as quickly as possible. Try to ensure frameworks and libraries optimize for getting started quickly. For example, `npx create-next-app` or `brew install bat`. Optimize for quick iterations and fast feedback loops to the developer.\r\n- **Make upgrading easy:** When making a major version change, limit the “blast radius” of the changes to make it easy for folks to update dependencies. Ideally, changes should start out opt-in with many months of lead time before landing in a major version. Then, major versions should include codemods – scripts that run code transforms to help automatically migrate code and fix breaking changes.\r\n- **Helpful error messages:** When applicable, include hyperlinks in error messages to provide more context on how to solve the error. Your tools should be providing you feedback as you type. The faster, the better (e.g. type checking, linting) before runtime or compilation errors. [Don't make me think](https://www.swyx.io/write-errors-that-don-t-make-me-think-24hg).\r\n\r\n<StaticTweet id=\"1124787522909949952\" />\r\n\r\n- **Strong defaults and conventions:** Have an opinion about “the right way” to build software. For example, don't make me think about setting up routing, just use the file-system-based routing with Next.js. Don't make me configure compilation and bundling, just set up good defaults for me with webpack/swc/vite/esbuild.\r\n- **Provide escape hatches:** The counter to strong defaults is to make sure there are escape hatches when the developer wants to break from the standard configuration. One reason Next.js was successful in the beginning was being able to easily override webpack _without_ leaving the framework, whereas CRA required something like [craco](https://github.com/gsoft-inc/craco) after ejecting.\r\n- **Reduce risk with dependencies:** When you `npm i next`, you only install 13 dependencies from npm. The rest of the dependencies are inlined into Next.js to have faster installation times and improved security. In the future, we'd like to turn Next.js into a [single binary](/blog/rust) you can install.\r\n\r\n### Documentation\r\n\r\n- **Lead with code:** Developers want to write code. Give them code examples as starting blocks. Don't bury the lede.\r\n- **Solve the problem (aka: answer the question):** Developers come to docs to learn the answer to a question, challenge, or problem they're trying to resolve. Give them the answer through multiple methods (video, text, tutorials, guides, etc.), so they learn the solution in a way that works for them.\r\n- **Automated documentation:** When documenting an API, it's helpful to generate the docs from the source of truth (code) to ensure they remain in sync. For example, Vercel's API docs are auto-generated from its [OpenAPI spec](https://swagger.io/specification/).\r\n- **Not just the happy path:** The documentation is a reference guide for developers trying to get work done. Often, this means searching for an error and looking for a solution they can copy/paste. It's important to document the workaround and hacks, too. I'd rather acknowledge a gap in the product and _unblock_ the developer rather than leave them frustrated.\r\n- **Optimize for skimming:** Let's face it, we all skim. Especially when reading developer documentation. My eyes jump directly to code blocks, trying to find the solution to my given problem. To help provide the best DX, consider adding helpful code comments in the code snippets and showing multiple options or permutations of the desired feature/API.\r\n- **Be precise:** Avoid technical jargon and idioms. If you're using an acronym, spell it out the first time and don't assume the reader knows what it is. Your docs should be accessible for both beginners and experts. Consider putting content that's helpful for experts but not critical for the happy path in collapsible “deep dive” sections.\r\n- **Progressively expose complexity:** Keep the first-time experience crisp while progressively informing developers about more complex features as they continue building with the product. It's not feasible to expect developers to learn about the entirety of the platform to get started.\r\n\r\n<StaticTweet id=\"1258579119740248066\" />\r\n\r\n### APIs\r\n\r\n- **Don't break API workflows:** API versioning should be very intentional and explicit. Err on the side of over-communication when making changes to APIs and give developers plenty of time to update to new versions. I've personally enjoyed Stripe's API versioning – they have [an excellent post](https://stripe.com/blog/api-versioning) if you want to learn more. I've seen some instances where AWS sends a deprecation email about an API that's been stable for years, plus gives them years of upgrade time.\r\n- **Let me try out APIs quickly:** Some of my favorite API documentation allows you to generate an API key and try out endpoints in a few seconds. Some even recognize that you're already logged in and personalize the page based on your account information. [Square does this well](https://developer.squareup.com/explorer/square). I also like GraphiQL for this – you view the entire graph schema, make requests, run mutations, format your code, and more.\r\n\r\n<StaticTweet id=\"1471351025252519936\" />\r\n\r\n## Related Reading\r\n\r\n- [The Case for Developer Experience](https://future.com/the-case-for-developer-experience/)\r\n- [The Radiating Circles of DX Architecture](https://dx.tips/circles)\r\n- [What Is Developer Experience? - Adam Wathan (Tailwind CSS) and Lee Robinson (Vercel)](https://developerexperience.buzzsprout.com/1806381/8744993)\r\n- [What is Experience Engineering?](https://quobix.com/articles/experience-engineering/)\r\n",
    "code": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!g.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(a=p(e,r))||a.enumerable});return t};var y=(t,e,o)=>(o=t!=null?h(m(t)):{},s(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),w=t=>s(i({},\"__esModule\",{value:!0}),t);var c=f((D,l)=>{l.exports=_jsx_runtime});var j={};b(j,{default:()=>x,frontmatter:()=>v});var n=y(c()),v={title:\"What Makes a Great Developer Experience?\",publishedAt:\"2022-06-13\",summary:\"Tools that keep developers in the flow state have a magnetic force. An often unexplainable, invisible pull that attracts and retains them to certain products. This pull is Developer Experience (DX).\",image:\"/static/images/developer-experience-examples/banner.png\"};function d(t){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\",em:\"em\",h2:\"h2\"},t.components),{StaticTweet:o}=e;return o||I(\"StaticTweet\",!0,\"10:1-10:41\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Here's a collection of opinions I hold on what makes a great Developer Experience (DX). Note that some of these apply more broadly than their category (e.g. frameworks).\"}),`\n`,(0,n.jsx)(o,{id:\"1476237583105601538\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"frameworks-and-libraries\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#frameworks-and-libraries\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Frameworks and Libraries\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Onboard as fast as possible:\"}),\" To keep creatives in the flow, you want to enable them to get started as quickly as possible. Try to ensure frameworks and libraries optimize for getting started quickly. For example, \",(0,n.jsx)(e.code,{children:\"npx create-next-app\"}),\" or \",(0,n.jsx)(e.code,{children:\"brew install bat\"}),\". Optimize for quick iterations and fast feedback loops to the developer.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Make upgrading easy:\"}),\" When making a major version change, limit the \\u201Cblast radius\\u201D of the changes to make it easy for folks to update dependencies. Ideally, changes should start out opt-in with many months of lead time before landing in a major version. Then, major versions should include codemods \\u2013 scripts that run code transforms to help automatically migrate code and fix breaking changes.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Helpful error messages:\"}),\" When applicable, include hyperlinks in error messages to provide more context on how to solve the error. Your tools should be providing you feedback as you type. The faster, the better (e.g. type checking, linting) before runtime or compilation errors. \",(0,n.jsx)(e.a,{href:\"https://www.swyx.io/write-errors-that-don-t-make-me-think-24hg\",children:\"Don't make me think\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(o,{id:\"1124787522909949952\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Strong defaults and conventions:\"}),\" Have an opinion about \\u201Cthe right way\\u201D to build software. For example, don't make me think about setting up routing, just use the file-system-based routing with Next.js. Don't make me configure compilation and bundling, just set up good defaults for me with webpack/swc/vite/esbuild.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Provide escape hatches:\"}),\" The counter to strong defaults is to make sure there are escape hatches when the developer wants to break from the standard configuration. One reason Next.js was successful in the beginning was being able to easily override webpack \",(0,n.jsx)(e.em,{children:\"without\"}),\" leaving the framework, whereas CRA required something like \",(0,n.jsx)(e.a,{href:\"https://github.com/gsoft-inc/craco\",children:\"craco\"}),\" after ejecting.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Reduce risk with dependencies:\"}),\" When you \",(0,n.jsx)(e.code,{children:\"npm i next\"}),\", you only install 13 dependencies from npm. The rest of the dependencies are inlined into Next.js to have faster installation times and improved security. In the future, we'd like to turn Next.js into a \",(0,n.jsx)(e.a,{href:\"/blog/rust\",children:\"single binary\"}),\" you can install.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"documentation\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#documentation\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Documentation\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Lead with code:\"}),\" Developers want to write code. Give them code examples as starting blocks. Don't bury the lede.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Solve the problem (aka: answer the question):\"}),\" Developers come to docs to learn the answer to a question, challenge, or problem they're trying to resolve. Give them the answer through multiple methods (video, text, tutorials, guides, etc.), so they learn the solution in a way that works for them.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Automated documentation:\"}),\" When documenting an API, it's helpful to generate the docs from the source of truth (code) to ensure they remain in sync. For example, Vercel's API docs are auto-generated from its \",(0,n.jsx)(e.a,{href:\"https://swagger.io/specification/\",children:\"OpenAPI spec\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Not just the happy path:\"}),\" The documentation is a reference guide for developers trying to get work done. Often, this means searching for an error and looking for a solution they can copy/paste. It's important to document the workaround and hacks, too. I'd rather acknowledge a gap in the product and \",(0,n.jsx)(e.em,{children:\"unblock\"}),\" the developer rather than leave them frustrated.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Optimize for skimming:\"}),\" Let's face it, we all skim. Especially when reading developer documentation. My eyes jump directly to code blocks, trying to find the solution to my given problem. To help provide the best DX, consider adding helpful code comments in the code snippets and showing multiple options or permutations of the desired feature/API.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Be precise:\"}),\" Avoid technical jargon and idioms. If you're using an acronym, spell it out the first time and don't assume the reader knows what it is. Your docs should be accessible for both beginners and experts. Consider putting content that's helpful for experts but not critical for the happy path in collapsible \\u201Cdeep dive\\u201D sections.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Progressively expose complexity:\"}),\" Keep the first-time experience crisp while progressively informing developers about more complex features as they continue building with the product. It's not feasible to expect developers to learn about the entirety of the platform to get started.\"]}),`\n`]}),`\n`,(0,n.jsx)(o,{id:\"1258579119740248066\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"apis\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#apis\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"APIs\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Don't break API workflows:\"}),\" API versioning should be very intentional and explicit. Err on the side of over-communication when making changes to APIs and give developers plenty of time to update to new versions. I've personally enjoyed Stripe's API versioning \\u2013 they have \",(0,n.jsx)(e.a,{href:\"https://stripe.com/blog/api-versioning\",children:\"an excellent post\"}),\" if you want to learn more. I've seen some instances where AWS sends a deprecation email about an API that's been stable for years, plus gives them years of upgrade time.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Let me try out APIs quickly:\"}),\" Some of my favorite API documentation allows you to generate an API key and try out endpoints in a few seconds. Some even recognize that you're already logged in and personalize the page based on your account information. \",(0,n.jsx)(e.a,{href:\"https://developer.squareup.com/explorer/square\",children:\"Square does this well\"}),\". I also like GraphiQL for this \\u2013 you view the entire graph schema, make requests, run mutations, format your code, and more.\"]}),`\n`]}),`\n`,(0,n.jsx)(o,{id:\"1471351025252519936\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"related-reading\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#related-reading\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Related Reading\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://future.com/the-case-for-developer-experience/\",children:\"The Case for Developer Experience\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://dx.tips/circles\",children:\"The Radiating Circles of DX Architecture\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://developerexperience.buzzsprout.com/1806381/8744993\",children:\"What Is Developer Experience? - Adam Wathan (Tailwind CSS) and Lee Robinson (Vercel)\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://quobix.com/articles/experience-engineering/\",children:\"What is Experience Engineering?\"})}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var x=k;function I(t,e,o){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(o?\"\\nIt\\u2019s referenced in your code at `\"+o+\"` in `D:\\\\Linux_Share\\\\reactapp\\\\rifan-blog\\\\data\\\\blog\\\\_mdx_bundler_entry_point-ee22d554-7ba4-4adc-bc5b-dd7c7a25d134.mdx`\":\"\"))}return w(j);})();\n;return Component;"
  },
  "_id": "blog/developer-experience-examples.mdx",
  "_raw": {
    "sourceFilePath": "blog/developer-experience-examples.mdx",
    "sourceFileName": "developer-experience-examples.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/developer-experience-examples"
  },
  "type": "Blog",
  "readingTime": {
    "text": "5 min read",
    "minutes": 4.35,
    "time": 261000,
    "words": 870
  },
  "wordCount": 872,
  "tweetIds": [
    "1476237583105601538",
    "1124787522909949952",
    "1258579119740248066",
    "1471351025252519936"
  ],
  "slug": "developer-experience-examples"
}