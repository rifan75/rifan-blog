{
  "title": "The Story of Heroku",
  "publishedAt": "2022-05-30",
  "summary": "How Heroku changed how we build and deploy software.",
  "image": "/static/images/heroku/banner.png",
  "body": {
    "raw": "\r\nHeroku made it easy for any developer to build and run applications in the cloud without managing their own infrastructure. Now 15 years later, it continues to inspire the next generation of developers. Why did Heroku become so popular? What can we learn from their incredible developer experience? How is Heroku shaping the next generation of serverless?\r\n\r\n## Early Days of Heroku\r\n\r\nIn 2006, Amazon Web Services (AWS) [launched EC2](https://aws.amazon.com/about-aws/whats-new/2006/08/24/announcing-amazon-elastic-compute-cloud-amazon-ec2---beta/), making it easy to run compute on-demand. Developers didn't need to purchase, set up, and manage their own infrastructure anymore¬†‚Äì they could pay for cloud compute as needed.\r\n\r\nAt the same time, many developers were building monolithic [Ruby on Rails](https://rubyonrails.org/) applications. Rails made developers incredibly productive at building applications, but it was still painful and time-consuming to get them deployed. Developers might spend weeks (or months) just on deployment.\r\n\r\nIn 2007, three Ruby developers ‚Äì James Lindenbaum, Adam Wiggins, and Orion Henry ‚Äì founded Heroku. Their mission was to make computing more accessible. The [first version of Heroku](https://techcrunch.com/2008/02/07/heroku-lifts-ruby-on-rails-development-to-the-cloud/) was an in-browser code editor that made it easy to build and deploy Ruby applications.\r\n\r\n<Image\r\n  alt=\"Heroku's original product, an in-browser IDE allowing you to instantly create and publish Rails apps.\"\r\n  src={`/static/images/heroku/ide.png`}\r\n  width={833}\r\n  height={623}\r\n/>\r\n\r\nWhile their original goal was to help educate developers and make computing more accessible, they noticed that many developers weren't using the platform for _learning_ ‚Äì they were using it as an easy way to get their Ruby applications deployed. Heroku joined Y Combinator to become the easiest place to build and deploy any Rails application.\r\n\r\n<Image\r\n  alt=\"Early version of Heroku from 2008, soon after joining Y Combinator.\"\r\n  src={`/static/images/heroku/2008.png`}\r\n  width={3014 / 2}\r\n  height={1586 / 2}\r\n/>\r\n\r\nShortly after Heroku launched, Google App Engine (2008) and Microsoft Azure (2010) entered the market. A trend started to appear. Developers wanted to spend less time configuring infrastructure, and more time building their application.\r\n\r\nIn 2010, Heroku was bought by Salesforce for [$212 million](https://techcrunch.com/2010/12/08/breaking-salesforce-buys-heroku-for-212-million-in-cash/). At the time of acquisition, Heroku had ~30 employees and only supported Ruby. Y Combinator was still relatively unproven and Heroku was their [largest exit yet](https://www.ycdb.co/top-companies/exit-value).\r\n\r\nWhat did Salesforce see in Heroku that led to acquisition?\r\n\r\n## Early Bets\r\n\r\nHeroku made some early tech choices that proved to be very productive for developers building monolithic applications: **Ruby on Rails, Git, and Postgres.**\r\n\r\nGit was created in 2005 by Linus Torvalds to help develop Linux. Even though there were many version control systems at the time, git begun to slowly grow in popularity. However, everything changed when GitHub was founded in 2007.\r\n\r\nLike the Heroku founders, the GitHub founders were Ruby developers. In 2008, the Ruby on Rails project switched to using GitHub, and the entire Ruby community followed shortly after (thus adopting git as well). **Heroku became synonymous with Rails.** Later, the creator of Ruby [joined Heroku](https://blog.heroku.com/matz_joins_heroku) to continue working on the language.\r\n\r\nTo run your Rails application, you needed a database. Heroku allowed you to add a Postgres database with **one click** through [add-ons](https://elements.heroku.com/addons). Today, Postgres has grown to be one of the most popular databases, which wasn't as obvious in 2008. It became the default choice for folks building monolithic Rails applications.\r\n\r\n<Callout emoji=\"üí°\">\r\n\r\nAdam, the Co-Founder and CTO of Heroku, coined the term [12 factor app](https://12factor.net/). This was the blueprint for building for the web (at the time) and is still relevant many years later.\r\n\r\n</Callout>\r\n\r\n## Developer Productivity\r\n\r\nHeroku set a new standard for developer experience. To deploy your application, you pushed code to git and received a URL. `git push heroku main`. **That's it.**\r\n\r\nHeroku would build your application remotely (in the cloud) and deploy it to their infrastructure. Developers weren't used to deployment being this easy or fast. Heroku was ahead of its time and ‚Äúserverless‚Äù in the sense you didn't have to manage servers yourself.\r\n\r\n<Image\r\n  alt=\"Heroku's landing page in 2011 after expanding past Ruby to become a cloud application platform\"\r\n  src={`/static/images/heroku/2011.png`}\r\n  width={3010 / 2}\r\n  height={1582 / 2}\r\n/>\r\n\r\nDevelopers were able to delegate hosting to the Heroku platform without feeling like they were giving up too much control. They didn't _want_ to manage server maintenance or perform upgrades ‚Äì but they did want to understand what was happening if things went wrong.\r\n\r\n<Callout emoji=\"üí°\">\r\n\r\nHeroku's [Buildpacks](https://elements.heroku.com/buildpacks) have shaped how software is built today. They automated the build process for any language or framework and transformed the code you write into a deployable image on Heroku. You might hear similar terminology today as ‚Äúbuilders‚Äù or ‚Äúadapters‚Äù.\r\n\r\n</Callout>\r\n\r\nAs their Co-Founder James said, you ‚Äú[dialed up the knob when you wanted to scale up](https://www.youtube.com/watch?v=3FhcROr0XdM)‚Äù. Heroku nailed the CLI experience with commands like:\r\n\r\n- `heroku logs` - View realtime logs from your application\r\n- `heroku run` - Execute any shell command on the remote machine\r\n- `heroku ps` - View the status of remote processes running\r\n- `heroku config:add key=value` - Add environment variables to configure your app\r\n- `heroku rollback` - Single command rollback to an existing working version\r\n\r\n<Image\r\n  alt=\"Heroku's landing page in 2011 after expanding past Ruby to become a cloud application platform\"\r\n  src={`/static/images/heroku/platform.png`}\r\n  width={1141}\r\n  height={602}\r\n/>\r\n\r\n## Heroku's Platform Dominance\r\n\r\nHeroku became one of the largest platforms for building and deploying code by providing:\r\n\r\n- Hosting for your app\r\n- One-click button to add a database (including backups)\r\n- One-click resizing/scaling of services\r\n- Support for background jobs\r\n- Add-ons for monitoring, logging, and more\r\n\r\nDevelopers didn't need to manually configure services to get started. They just pushed code through git. And while Heroku was opinionated about it's preferred stack (Rails + Postgres), it had a wide ecosystems of add-ons if you had different preferences.\r\n\r\nThe seamless integration between the framework of choice (Ruby on Rails) and the infrastructure made developers incredibly productive. Developers could deploy a monolithic Rails app to Heroku in a weekend and dial up the knobs as their traffic increased.\r\n\r\nHeroku became a focal point of education for anyone working with Rails and Node.js due to its free tier. Hobby developers and students could turn their ideas into production code extremely fast, without needing access to a credit card.\r\n\r\n## From Monolith to Microservices\r\n\r\nDuring Heroku's rise to dominance, some developers began to scale out of monolithic workloads. This was expedited by two trends: **serverless** and **Kubernetes**.\r\n\r\n- **2013:** Docker is released\r\n- **2014:** Kubernetes is released\r\n- **2014:** AWS Lambda is released\r\n- **2017:** GitHub moves to Kubernetes\r\n\r\n<Image\r\n  alt=\"Serverless and Kurbernetes trends on Google\"\r\n  src={`/static/images/heroku/trends.png`}\r\n  width={2360 / 2}\r\n  height={1254 / 2}\r\n/>\r\n\r\nDuring this same time period, the types of web experiences developers were trying to build demanded more specialized tools. There was an unbundling of the monolithic into dedicated, specialized services:\r\n\r\n| Monolith (on a single server) | Microservices (APIs & libraries)                                 |\r\n| ----------------------------- | ---------------------------------------------------------------- |\r\n| Authentication                | Auth0, AWS Cognito                                               |\r\n| Database Queries              | Prisma, Mongoose                                                 |\r\n| Compute                       | AWS Lambda, Cloud Functions, Azure Functions, Cloudflare Workers |\r\n| HTML Rendering & Templates    | Frontend Frameworks                                              |\r\n| JavaScript and CSS Bundling   | Frontend Frameworks                                              |\r\n| Realtime                      | Firebase, Ably, Pusher, AWS SQS, etc.                            |\r\n| Storage                       | AWS S3, Google Cloud Storage                                     |\r\n| Image Optimization            | Imgix, Cloudinary, AWS CloudFront                                |\r\n\r\nAt the time, monolithic apps were still the fastest way for developers to put an idea into production. This new wave of serverless and Kubernetes was often difficult to use and required specialized talent. Some teams jumped on the new trend too quickly, where it was often cheaper to scale up and pay for a managed platform like Heroku than to hire a team of DevOps engineers.\r\n\r\nHowever, some developers were still ejecting from monolithic platforms due to cost, flexibility, or availability. And the state of tooling for serverless and Kubernetes left a lot to be desired. This lead to a _new wave of innovation_.\r\n\r\n## Serverless 1.0\r\n\r\nWhy did some developers start to explore moving from their monolith to serverless?\r\n\r\n- **Container size:** As the size of your application grew, so did your container ‚Äì often requiring a more expensive Dyno (container) to run on Heroku. Developers wanted to break their monolith into smaller, lightweight, stateless functions. This made even more sense as code-splitting became automatic in frontend tooling like webpack (and Next.js) where you would only invoke the compute necessary for the requested route, as well as only loading the minimum required JavaScript.\r\n- **Difficulty scaling:** While turning up the knobs works for some applications, it's difficult to apply that approach to all apps. For example, what happens when your container has background tasks? How do you dial up the knob? Certain types of application architecture did not evolve well with monoliths. Built-in autoscaling is also [not available on all plans on Heroku](https://devcenter.heroku.com/articles/scaling#autoscaling).\r\n- **Issues with state:** Containers required complex health checks to understand when they were entering a bad state, often requiring restarts. This could get messy if there was initialization logic to connect to external services.\r\n- **Distributed visitors:** Heroku is _not_ an Edge Network and instead required you to bring your own CDN. This led some teams back to DevOps, often building their own internal version of Heroku (but with a container orchestration system like Kubernetes). Further, Heroku's limited region options meant it was a non-starter for teams with specific regulatory requirements around data storage.\r\n\r\nFor example, let's say you need to build a backend for a mobile app. Should you use a monolith or serverless? You want it to be scalable, stateless, and available around the world, all without spending too much money or time managing infrastructure.\r\n\r\n[Bret Taylor](https://en.wikipedia.org/wiki/Bret_Taylor), the Co-CEO of Salesforce, co-creator of Google Maps, and former CTO of Facebook, was in this same position in 2019. He built an [iOS app](https://twitter.com/btaylor/status/1315312482894835712) to check the air quality and display a widget on his home screen.\r\n\r\nHe choose AWS Lambda for [on-demand compute](https://github.com/finiteloop/air-quality/blob/master/server/update_data/app.py#L53-L59), AWS S3 for [durable storage](https://github.com/finiteloop/air-quality/blob/master/server/update_data/app.py#L44-L50), and AWS CloudFront to push it to every region.\r\n\r\n<StaticTweet id=\"1097592089502613504\" />\r\n\r\nBut to \"beat\" Heroku, you needed to be 10x better. And Serverless 1.0 was not 10x better.\r\n\r\n## Heroku in 2022\r\n\r\nHeroku has had a tough 2022 with multiple [security incidents](https://status.heroku.com/incidents/2413) and ongoing [outages](https://status.heroku.com/incidents/2402). This has led some teams who might have skipped the Serverless 1.0 era step back and reevaluate the current state. How are teams building today?\r\n\r\nHeroku's favorite framework ‚Äì Ruby on Rails ‚Äì is now hosted on GitHub Pages. None of the 15 Rails companies featured on the home page are using Heroku for their .com (as far as I can tell). Even the biggest Rails shop, GitHub, has started [building with React](https://primer.style/react/) on the frontend and moving the [backend to Kubernetes](https://www.theregister.com/2018/08/16/github_rails_microsoft/#:~:text=The%20company%20is%20moving%20away,Haskell%20being%20deployed%20for%20services).\r\n\r\nWhat developers loved about Heroku was that they **didn't have to manage infrastructure**. Somewhere along the way from monolith to microservices, application developers ended up doing DevOps again. Infrastructure as Code (IaC) tools like [Terraform](https://www.terraform.io/), [AWS CDK](https://aws.amazon.com/cdk/), and [Pulumi](https://www.pulumi.com/) enabled a more lean DevOps experience, but still required managing, scaling, and debugging that infrastructure.\r\n\r\nExpectations for both frontend and backend experience have risen, making some developers abandon PaaS for a decoupled architecture allowing them to pick the best tools possible.\r\n\r\n## What can we learn from Heroku?\r\n\r\nI'm personally inspired by Heroku and have used the platform since 2012 for some side projects. We can learn a lot from their story and how it's shaped the software industry.\r\n\r\n- **Git push to URL is incredibly powerful:** When folks talk about Heroku 15 years later, they still mention `git push heroku main`. Heroku inspired platforms like Vercel with one command (`vercel`) to deploy your frontend globally, while having a singular remote (origin) and creating deeper integrations into first-party git providers (e.g. GitHub).\r\n- **Editing code in browser lowers the barrier to entry:** While Heroku pivoted away from an in-browser IDE, their ideas have led (either directly or indirectly) to the creation of Codepen, CodeSandbox, GitHub CodeSpaces, Replit, StackBlitz, and more.\r\n- **Don't forget about solo developer productivity:** Some developers still deploy monolithic applications to Heroku or other services like Fly.io, Railway, and Render to colocate their backend and frontend. They don't need (or want) to have microservices.\r\n- **Platforms need to evolve over time:** You could make the argument Heroku would be even more popular today if it evolved to add support for scaling to zero, global deployments by default, and focused on the rapidly evolving JavaScript/TypeScript/React ecosystem.\r\n\r\n<StaticTweet id=\"1334595810240106497\" />\r\n\r\nI'm also biased, as I work at Vercel, in believing serverless and Edge platforms are the future. Here's my thoughts on where we're headed:\r\n\r\n- On the **frontend**, you want to `git push` and have your code close to your visitors globally. Platforms like Vercel help you go from idea to global app in seconds.\r\n- On the **backend**, you (probably) don't want to scale Kubernetes yourself. There's now fully-managed Kubernetes ([AWS EKS](https://aws.amazon.com/eks/), [Google Cloud GKE](https://cloud.google.com/kubernetes-engine)), as well as [Google Cloud Run](https://cloud.google.com/run), which allows you to run and automatically scale stateless serverless containers.\r\n- **Serverless functions** don't need [health checks](https://devcenter.heroku.com/articles/production-check#dyno-redundancy) and are [highly available (multi-az)](https://docs.aws.amazon.com/lambda/latest/dg/security-resilience.html) without having to think about \"[number of dynos](https://devcenter.heroku.com/articles/production-check#dyno-redundancy)\". For each concurrent request, you get a function instance. Scaling is not something you spend time tuning or thinking much about. Entire categories of commands like `ps:stop`, `ps:restart`, and `ps:scale` disapper and become unnecessary.\r\n\r\nAnd that's all for now. Hopefully you now have a better appreciation how Heroku changed the software industry. If you see anything missing here about the story of Heroku, [let me know](https://twitter.com/leeerob).\r\n\r\n## Related Reading\r\n\r\n- [JavaScript Containers](https://tinyclouds.org/javascript_containers)\r\n- [Cloud Distros](https://www.swyx.io/cloud-distros)\r\n- [Static Hoisting](https://rauchg.com/2020/static-hoisting)\r\n",
    "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),b=(o,e)=>{for(var t in e)a(o,t,{get:e[t],enumerable:!0})},l=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(o,r)&&r!==t&&a(o,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return o};var w=(o,e,t)=>(t=o!=null?u(g(o)):{},l(e||!o||!o.__esModule?a(t,\"default\",{value:o,enumerable:!0}):t,o)),k=o=>l(a({},\"__esModule\",{value:!0}),o);var c=y((C,d)=>{d.exports=_jsx_runtime});var x={};b(x,{default:()=>S,frontmatter:()=>v});var n=w(c()),v={title:\"The Story of Heroku\",publishedAt:\"2022-05-30\",summary:\"How Heroku changed how we build and deploy software.\",image:\"/static/images/heroku/banner.png\"};function h(o){let e=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",em:\"em\",strong:\"strong\",code:\"code\",ul:\"ul\",li:\"li\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},o.components),{Image:t,Callout:i,StaticTweet:r}=e;return i||s(\"Callout\",!0,\"50:1-54:11\"),t||s(\"Image\",!0,\"18:1-23:3\"),r||s(\"StaticTweet\",!0,\"156:1-156:41\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Heroku made it easy for any developer to build and run applications in the cloud without managing their own infrastructure. Now 15 years later, it continues to inspire the next generation of developers. Why did Heroku become so popular? What can we learn from their incredible developer experience? How is Heroku shaping the next generation of serverless?\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"early-days-of-heroku\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#early-days-of-heroku\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Early Days of Heroku\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In 2006, Amazon Web Services (AWS) \",(0,n.jsx)(e.a,{href:\"https://aws.amazon.com/about-aws/whats-new/2006/08/24/announcing-amazon-elastic-compute-cloud-amazon-ec2---beta/\",children:\"launched EC2\"}),\", making it easy to run compute on-demand. Developers didn't need to purchase, set up, and manage their own infrastructure anymore\\xA0\\u2013 they could pay for cloud compute as needed.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At the same time, many developers were building monolithic \",(0,n.jsx)(e.a,{href:\"https://rubyonrails.org/\",children:\"Ruby on Rails\"}),\" applications. Rails made developers incredibly productive at building applications, but it was still painful and time-consuming to get them deployed. Developers might spend weeks (or months) just on deployment.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In 2007, three Ruby developers \\u2013 James Lindenbaum, Adam Wiggins, and Orion Henry \\u2013 founded Heroku. Their mission was to make computing more accessible. The \",(0,n.jsx)(e.a,{href:\"https://techcrunch.com/2008/02/07/heroku-lifts-ruby-on-rails-development-to-the-cloud/\",children:\"first version of Heroku\"}),\" was an in-browser code editor that made it easy to build and deploy Ruby applications.\"]}),`\n`,(0,n.jsx)(t,{alt:\"Heroku's original product, an in-browser IDE allowing you to instantly create and publish Rails apps.\",src:\"/static/images/heroku/ide.png\",width:833,height:623}),`\n`,(0,n.jsxs)(e.p,{children:[\"While their original goal was to help educate developers and make computing more accessible, they noticed that many developers weren't using the platform for \",(0,n.jsx)(e.em,{children:\"learning\"}),\" \\u2013 they were using it as an easy way to get their Ruby applications deployed. Heroku joined Y Combinator to become the easiest place to build and deploy any Rails application.\"]}),`\n`,(0,n.jsx)(t,{alt:\"Early version of Heroku from 2008, soon after joining Y Combinator.\",src:\"/static/images/heroku/2008.png\",width:3014/2,height:1586/2}),`\n`,(0,n.jsx)(e.p,{children:\"Shortly after Heroku launched, Google App Engine (2008) and Microsoft Azure (2010) entered the market. A trend started to appear. Developers wanted to spend less time configuring infrastructure, and more time building their application.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In 2010, Heroku was bought by Salesforce for \",(0,n.jsx)(e.a,{href:\"https://techcrunch.com/2010/12/08/breaking-salesforce-buys-heroku-for-212-million-in-cash/\",children:\"$212 million\"}),\". At the time of acquisition, Heroku had ~30 employees and only supported Ruby. Y Combinator was still relatively unproven and Heroku was their \",(0,n.jsx)(e.a,{href:\"https://www.ycdb.co/top-companies/exit-value\",children:\"largest exit yet\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"What did Salesforce see in Heroku that led to acquisition?\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"early-bets\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#early-bets\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Early Bets\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Heroku made some early tech choices that proved to be very productive for developers building monolithic applications: \",(0,n.jsx)(e.strong,{children:\"Ruby on Rails, Git, and Postgres.\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Git was created in 2005 by Linus Torvalds to help develop Linux. Even though there were many version control systems at the time, git begun to slowly grow in popularity. However, everything changed when GitHub was founded in 2007.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Like the Heroku founders, the GitHub founders were Ruby developers. In 2008, the Ruby on Rails project switched to using GitHub, and the entire Ruby community followed shortly after (thus adopting git as well). \",(0,n.jsx)(e.strong,{children:\"Heroku became synonymous with Rails.\"}),\" Later, the creator of Ruby \",(0,n.jsx)(e.a,{href:\"https://blog.heroku.com/matz_joins_heroku\",children:\"joined Heroku\"}),\" to continue working on the language.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To run your Rails application, you needed a database. Heroku allowed you to add a Postgres database with \",(0,n.jsx)(e.strong,{children:\"one click\"}),\" through \",(0,n.jsx)(e.a,{href:\"https://elements.heroku.com/addons\",children:\"add-ons\"}),\". Today, Postgres has grown to be one of the most popular databases, which wasn't as obvious in 2008. It became the default choice for folks building monolithic Rails applications.\"]}),`\n`,(0,n.jsx)(i,{emoji:\"\\u{1F4A1}\",children:(0,n.jsxs)(e.p,{children:[\"Adam, the Co-Founder and CTO of Heroku, coined the term \",(0,n.jsx)(e.a,{href:\"https://12factor.net/\",children:\"12 factor app\"}),\". This was the blueprint for building for the web (at the time) and is still relevant many years later.\"]})}),`\n`,(0,n.jsxs)(e.h2,{id:\"developer-productivity\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#developer-productivity\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Developer Productivity\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Heroku set a new standard for developer experience. To deploy your application, you pushed code to git and received a URL. \",(0,n.jsx)(e.code,{children:\"git push heroku main\"}),\". \",(0,n.jsx)(e.strong,{children:\"That's it.\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Heroku would build your application remotely (in the cloud) and deploy it to their infrastructure. Developers weren't used to deployment being this easy or fast. Heroku was ahead of its time and \\u201Cserverless\\u201D in the sense you didn't have to manage servers yourself.\"}),`\n`,(0,n.jsx)(t,{alt:\"Heroku's landing page in 2011 after expanding past Ruby to become a cloud application platform\",src:\"/static/images/heroku/2011.png\",width:3010/2,height:1582/2}),`\n`,(0,n.jsxs)(e.p,{children:[\"Developers were able to delegate hosting to the Heroku platform without feeling like they were giving up too much control. They didn't \",(0,n.jsx)(e.em,{children:\"want\"}),\" to manage server maintenance or perform upgrades \\u2013 but they did want to understand what was happening if things went wrong.\"]}),`\n`,(0,n.jsx)(i,{emoji:\"\\u{1F4A1}\",children:(0,n.jsxs)(e.p,{children:[\"Heroku's \",(0,n.jsx)(e.a,{href:\"https://elements.heroku.com/buildpacks\",children:\"Buildpacks\"}),\" have shaped how software is built today. They automated the build process for any language or framework and transformed the code you write into a deployable image on Heroku. You might hear similar terminology today as \\u201Cbuilders\\u201D or \\u201Cadapters\\u201D.\"]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As their Co-Founder James said, you \\u201C\",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=3FhcROr0XdM\",children:\"dialed up the knob when you wanted to scale up\"}),\"\\u201D. Heroku nailed the CLI experience with commands like:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"heroku logs\"}),\" - View realtime logs from your application\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"heroku run\"}),\" - Execute any shell command on the remote machine\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"heroku ps\"}),\" - View the status of remote processes running\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"heroku config:add key=value\"}),\" - Add environment variables to configure your app\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"heroku rollback\"}),\" - Single command rollback to an existing working version\"]}),`\n`]}),`\n`,(0,n.jsx)(t,{alt:\"Heroku's landing page in 2011 after expanding past Ruby to become a cloud application platform\",src:\"/static/images/heroku/platform.png\",width:1141,height:602}),`\n`,(0,n.jsxs)(e.h2,{id:\"herokus-platform-dominance\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#herokus-platform-dominance\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Heroku's Platform Dominance\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Heroku became one of the largest platforms for building and deploying code by providing:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Hosting for your app\"}),`\n`,(0,n.jsx)(e.li,{children:\"One-click button to add a database (including backups)\"}),`\n`,(0,n.jsx)(e.li,{children:\"One-click resizing/scaling of services\"}),`\n`,(0,n.jsx)(e.li,{children:\"Support for background jobs\"}),`\n`,(0,n.jsx)(e.li,{children:\"Add-ons for monitoring, logging, and more\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Developers didn't need to manually configure services to get started. They just pushed code through git. And while Heroku was opinionated about it's preferred stack (Rails + Postgres), it had a wide ecosystems of add-ons if you had different preferences.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The seamless integration between the framework of choice (Ruby on Rails) and the infrastructure made developers incredibly productive. Developers could deploy a monolithic Rails app to Heroku in a weekend and dial up the knobs as their traffic increased.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Heroku became a focal point of education for anyone working with Rails and Node.js due to its free tier. Hobby developers and students could turn their ideas into production code extremely fast, without needing access to a credit card.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"from-monolith-to-microservices\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#from-monolith-to-microservices\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"From Monolith to Microservices\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"During Heroku's rise to dominance, some developers began to scale out of monolithic workloads. This was expedited by two trends: \",(0,n.jsx)(e.strong,{children:\"serverless\"}),\" and \",(0,n.jsx)(e.strong,{children:\"Kubernetes\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"2013:\"}),\" Docker is released\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"2014:\"}),\" Kubernetes is released\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"2014:\"}),\" AWS Lambda is released\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"2017:\"}),\" GitHub moves to Kubernetes\"]}),`\n`]}),`\n`,(0,n.jsx)(t,{alt:\"Serverless and Kurbernetes trends on Google\",src:\"/static/images/heroku/trends.png\",width:2360/2,height:1254/2}),`\n`,(0,n.jsx)(e.p,{children:\"During this same time period, the types of web experiences developers were trying to build demanded more specialized tools. There was an unbundling of the monolithic into dedicated, specialized services:\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Monolith (on a single server)\"}),(0,n.jsx)(e.th,{children:\"Microservices (APIs & libraries)\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Authentication\"}),(0,n.jsx)(e.td,{children:\"Auth0, AWS Cognito\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Database Queries\"}),(0,n.jsx)(e.td,{children:\"Prisma, Mongoose\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Compute\"}),(0,n.jsx)(e.td,{children:\"AWS Lambda, Cloud Functions, Azure Functions, Cloudflare Workers\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"HTML Rendering & Templates\"}),(0,n.jsx)(e.td,{children:\"Frontend Frameworks\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"JavaScript and CSS Bundling\"}),(0,n.jsx)(e.td,{children:\"Frontend Frameworks\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Realtime\"}),(0,n.jsx)(e.td,{children:\"Firebase, Ably, Pusher, AWS SQS, etc.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Storage\"}),(0,n.jsx)(e.td,{children:\"AWS S3, Google Cloud Storage\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Image Optimization\"}),(0,n.jsx)(e.td,{children:\"Imgix, Cloudinary, AWS CloudFront\"})]})]})]}),`\n`,(0,n.jsx)(e.p,{children:\"At the time, monolithic apps were still the fastest way for developers to put an idea into production. This new wave of serverless and Kubernetes was often difficult to use and required specialized talent. Some teams jumped on the new trend too quickly, where it was often cheaper to scale up and pay for a managed platform like Heroku than to hire a team of DevOps engineers.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, some developers were still ejecting from monolithic platforms due to cost, flexibility, or availability. And the state of tooling for serverless and Kubernetes left a lot to be desired. This lead to a \",(0,n.jsx)(e.em,{children:\"new wave of innovation\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"serverless-10\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#serverless-10\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Serverless 1.0\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Why did some developers start to explore moving from their monolith to serverless?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Container size:\"}),\" As the size of your application grew, so did your container \\u2013 often requiring a more expensive Dyno (container) to run on Heroku. Developers wanted to break their monolith into smaller, lightweight, stateless functions. This made even more sense as code-splitting became automatic in frontend tooling like webpack (and Next.js) where you would only invoke the compute necessary for the requested route, as well as only loading the minimum required JavaScript.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Difficulty scaling:\"}),\" While turning up the knobs works for some applications, it's difficult to apply that approach to all apps. For example, what happens when your container has background tasks? How do you dial up the knob? Certain types of application architecture did not evolve well with monoliths. Built-in autoscaling is also \",(0,n.jsx)(e.a,{href:\"https://devcenter.heroku.com/articles/scaling#autoscaling\",children:\"not available on all plans on Heroku\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Issues with state:\"}),\" Containers required complex health checks to understand when they were entering a bad state, often requiring restarts. This could get messy if there was initialization logic to connect to external services.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Distributed visitors:\"}),\" Heroku is \",(0,n.jsx)(e.em,{children:\"not\"}),\" an Edge Network and instead required you to bring your own CDN. This led some teams back to DevOps, often building their own internal version of Heroku (but with a container orchestration system like Kubernetes). Further, Heroku's limited region options meant it was a non-starter for teams with specific regulatory requirements around data storage.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"For example, let's say you need to build a backend for a mobile app. Should you use a monolith or serverless? You want it to be scalable, stateless, and available around the world, all without spending too much money or time managing infrastructure.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Bret_Taylor\",children:\"Bret Taylor\"}),\", the Co-CEO of Salesforce, co-creator of Google Maps, and former CTO of Facebook, was in this same position in 2019. He built an \",(0,n.jsx)(e.a,{href:\"https://twitter.com/btaylor/status/1315312482894835712\",children:\"iOS app\"}),\" to check the air quality and display a widget on his home screen.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"He choose AWS Lambda for \",(0,n.jsx)(e.a,{href:\"https://github.com/finiteloop/air-quality/blob/master/server/update_data/app.py#L53-L59\",children:\"on-demand compute\"}),\", AWS S3 for \",(0,n.jsx)(e.a,{href:\"https://github.com/finiteloop/air-quality/blob/master/server/update_data/app.py#L44-L50\",children:\"durable storage\"}),\", and AWS CloudFront to push it to every region.\"]}),`\n`,(0,n.jsx)(r,{id:\"1097592089502613504\"}),`\n`,(0,n.jsx)(e.p,{children:'But to \"beat\" Heroku, you needed to be 10x better. And Serverless 1.0 was not 10x better.'}),`\n`,(0,n.jsxs)(e.h2,{id:\"heroku-in-2022\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#heroku-in-2022\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Heroku in 2022\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Heroku has had a tough 2022 with multiple \",(0,n.jsx)(e.a,{href:\"https://status.heroku.com/incidents/2413\",children:\"security incidents\"}),\" and ongoing \",(0,n.jsx)(e.a,{href:\"https://status.heroku.com/incidents/2402\",children:\"outages\"}),\". This has led some teams who might have skipped the Serverless 1.0 era step back and reevaluate the current state. How are teams building today?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Heroku's favorite framework \\u2013 Ruby on Rails \\u2013 is now hosted on GitHub Pages. None of the 15 Rails companies featured on the home page are using Heroku for their .com (as far as I can tell). Even the biggest Rails shop, GitHub, has started \",(0,n.jsx)(e.a,{href:\"https://primer.style/react/\",children:\"building with React\"}),\" on the frontend and moving the \",(0,n.jsx)(e.a,{href:\"https://www.theregister.com/2018/08/16/github_rails_microsoft/#:~:text=The%20company%20is%20moving%20away,Haskell%20being%20deployed%20for%20services\",children:\"backend to Kubernetes\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"What developers loved about Heroku was that they \",(0,n.jsx)(e.strong,{children:\"didn't have to manage infrastructure\"}),\". Somewhere along the way from monolith to microservices, application developers ended up doing DevOps again. Infrastructure as Code (IaC) tools like \",(0,n.jsx)(e.a,{href:\"https://www.terraform.io/\",children:\"Terraform\"}),\", \",(0,n.jsx)(e.a,{href:\"https://aws.amazon.com/cdk/\",children:\"AWS CDK\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://www.pulumi.com/\",children:\"Pulumi\"}),\" enabled a more lean DevOps experience, but still required managing, scaling, and debugging that infrastructure.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Expectations for both frontend and backend experience have risen, making some developers abandon PaaS for a decoupled architecture allowing them to pick the best tools possible.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-can-we-learn-from-heroku\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-can-we-learn-from-heroku\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What can we learn from Heroku?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"I'm personally inspired by Heroku and have used the platform since 2012 for some side projects. We can learn a lot from their story and how it's shaped the software industry.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Git push to URL is incredibly powerful:\"}),\" When folks talk about Heroku 15 years later, they still mention \",(0,n.jsx)(e.code,{children:\"git push heroku main\"}),\". Heroku inspired platforms like Vercel with one command (\",(0,n.jsx)(e.code,{children:\"vercel\"}),\") to deploy your frontend globally, while having a singular remote (origin) and creating deeper integrations into first-party git providers (e.g. GitHub).\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Editing code in browser lowers the barrier to entry:\"}),\" While Heroku pivoted away from an in-browser IDE, their ideas have led (either directly or indirectly) to the creation of Codepen, CodeSandbox, GitHub CodeSpaces, Replit, StackBlitz, and more.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Don't forget about solo developer productivity:\"}),\" Some developers still deploy monolithic applications to Heroku or other services like Fly.io, Railway, and Render to colocate their backend and frontend. They don't need (or want) to have microservices.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Platforms need to evolve over time:\"}),\" You could make the argument Heroku would be even more popular today if it evolved to add support for scaling to zero, global deployments by default, and focused on the rapidly evolving JavaScript/TypeScript/React ecosystem.\"]}),`\n`]}),`\n`,(0,n.jsx)(r,{id:\"1334595810240106497\"}),`\n`,(0,n.jsx)(e.p,{children:\"I'm also biased, as I work at Vercel, in believing serverless and Edge platforms are the future. Here's my thoughts on where we're headed:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"On the \",(0,n.jsx)(e.strong,{children:\"frontend\"}),\", you want to \",(0,n.jsx)(e.code,{children:\"git push\"}),\" and have your code close to your visitors globally. Platforms like Vercel help you go from idea to global app in seconds.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"On the \",(0,n.jsx)(e.strong,{children:\"backend\"}),\", you (probably) don't want to scale Kubernetes yourself. There's now fully-managed Kubernetes (\",(0,n.jsx)(e.a,{href:\"https://aws.amazon.com/eks/\",children:\"AWS EKS\"}),\", \",(0,n.jsx)(e.a,{href:\"https://cloud.google.com/kubernetes-engine\",children:\"Google Cloud GKE\"}),\"), as well as \",(0,n.jsx)(e.a,{href:\"https://cloud.google.com/run\",children:\"Google Cloud Run\"}),\", which allows you to run and automatically scale stateless serverless containers.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Serverless functions\"}),\" don't need \",(0,n.jsx)(e.a,{href:\"https://devcenter.heroku.com/articles/production-check#dyno-redundancy\",children:\"health checks\"}),\" and are \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/lambda/latest/dg/security-resilience.html\",children:\"highly available (multi-az)\"}),' without having to think about \"',(0,n.jsx)(e.a,{href:\"https://devcenter.heroku.com/articles/production-check#dyno-redundancy\",children:\"number of dynos\"}),'\". For each concurrent request, you get a function instance. Scaling is not something you spend time tuning or thinking much about. Entire categories of commands like ',(0,n.jsx)(e.code,{children:\"ps:stop\"}),\", \",(0,n.jsx)(e.code,{children:\"ps:restart\"}),\", and \",(0,n.jsx)(e.code,{children:\"ps:scale\"}),\" disapper and become unnecessary.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"And that's all for now. Hopefully you now have a better appreciation how Heroku changed the software industry. If you see anything missing here about the story of Heroku, \",(0,n.jsx)(e.a,{href:\"https://twitter.com/leeerob\",children:\"let me know\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"related-reading\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#related-reading\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Related Reading\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://tinyclouds.org/javascript_containers\",children:\"JavaScript Containers\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.swyx.io/cloud-distros\",children:\"Cloud Distros\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://rauchg.com/2020/static-hoisting\",children:\"Static Hoisting\"})}),`\n`]})]})}function H(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var S=H;function s(o,e,t){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+o+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(t?\"\\nIt\\u2019s referenced in your code at `\"+t+\"` in `D:\\\\Linux_Share\\\\reactapp\\\\rifan-blog\\\\data\\\\blog\\\\_mdx_bundler_entry_point-2e3d3d86-2d8b-4458-8cc4-519356ab4039.mdx`\":\"\"))}return k(x);})();\n;return Component;"
  },
  "_id": "blog/heroku.mdx",
  "_raw": {
    "sourceFilePath": "blog/heroku.mdx",
    "sourceFileName": "heroku.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/heroku"
  },
  "type": "Blog",
  "readingTime": {
    "text": "12 min read",
    "minutes": 11.265,
    "time": 675900,
    "words": 2253
  },
  "wordCount": 2256,
  "tweetIds": [
    "1097592089502613504",
    "1334595810240106497"
  ],
  "slug": "heroku"
}