{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  ComputedFields,\r\n  defineDocumentType,\r\n  makeSource\r\n} from 'contentlayer/source-files';\r\n\r\nimport readingTime from 'reading-time';\r\nimport remarkGfm from 'remark-gfm';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport rehypeCodeTitles from 'rehype-code-titles';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport rehypePrism from 'rehype-prism-plus';\r\n\r\nconst computedFields: ComputedFields = {\r\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\r\n  wordCount: {\r\n    type: 'number',\r\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length\r\n  },\r\n  tweetIds: {\r\n    type: 'json',\r\n    resolve: (doc) => {\r\n      const tweetMatches = doc.body.raw.match(\r\n        /<StaticTweet\\sid=\"[0-9]+\"\\s\\/>/g\r\n      );\r\n      const tweetIDs = tweetMatches?.map((tweet:any) => tweet.match(/[0-9]+/g)[0]);\r\n      return tweetIDs ?? [];\r\n    }\r\n  },\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, '')\r\n  }\r\n};\r\n\r\nconst Blog = defineDocumentType(() => ({\r\n  name: 'Blog',\r\n  filePathPattern: 'blog/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    publishedAt: { type: 'string', required: true },\r\n    summary: { type: 'string', required: true },\r\n    image: { type: 'string', required: true }\r\n  },\r\n  computedFields\r\n}));\r\n\r\nconst Snippet = defineDocumentType(() => ({\r\n  name: 'Snippet',\r\n  filePathPattern: 'snippets/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    description: { type: 'string', required: true },\r\n    logo: { type: 'string', required: true }\r\n  },\r\n  computedFields\r\n}));\r\n\r\nconst OtherPage = defineDocumentType(() => ({\r\n  name: 'OtherPage',\r\n  filePathPattern: '*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true }\r\n  },\r\n  computedFields\r\n}));\r\n\r\nconst contentLayerConfig = makeSource({\r\n  contentDirPath: 'data',\r\n  documentTypes: [Blog, Snippet, OtherPage],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeCodeTitles,\r\n      rehypePrism,\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: ['anchor']\r\n          }\r\n        }\r\n      ]\r\n    ]\r\n  }\r\n});\r\n\r\nexport default contentLayerConfig;\r\n"],
  "mappings": ";AAAA;AAAA,EAEE;AAAA,EACA;AAAA,OACK;AAEP,OAAO,iBAAiB;AACxB,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,sBAAsB;AAC7B,OAAO,4BAA4B;AACnC,OAAO,iBAAiB;AAExB,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,EAChD;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAChB,YAAM,eAAe,IAAI,KAAK,IAAI;AAAA,QAChC;AAAA,MACF;AACA,YAAM,WAAW,cAAc,IAAI,CAAC,UAAc,MAAM,MAAM,SAAS,EAAE,EAAE;AAC3E,aAAO,YAAY,CAAC;AAAA,IACtB;AAAA,EACF;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,EAChE;AACF;AAEA,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC1C;AAAA,EACA;AACF,EAAE;AAEF,IAAM,UAAU,mBAAmB,OAAO;AAAA,EACxC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACzC;AAAA,EACA;AACF,EAAE;AAEF,IAAM,YAAY,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC1C;AAAA,EACA;AACF,EAAE;AAEF,IAAM,qBAAqB,WAAW;AAAA,EACpC,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,SAAS,SAAS;AAAA,EACxC,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;AAED,IAAO,8BAAQ;",
  "names": []
}
